(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 11.1' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[    235181,       4622]
NotebookOptionsPosition[    230812,       4511]
NotebookOutlinePosition[    231165,       4527]
CellTagsIndexPosition[    231122,       4524]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{
Cell["Galileo", "WolframAlphaLong",
 CellChangeTimes->{{3.706918696119121*^9, 
  3.706918702666685*^9}},ExpressionUUID->"3b5ceae7-e0e3-4f85-a9f6-\
86b83310b0e1"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"WolframAlpha", "[", 
  RowBox[{"\"\<Galileo\>\"", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"\"\<Image:PeopleData\>\"", ",", "1"}], "}"}], ",", 
     "\"\<Content\>\""}], "}"}], ",", 
   RowBox[{"PodStates", "\[Rule]", 
    RowBox[{
    "{", "\"\<ScientificContributions:PeopleData__More\>\"", "}"}]}]}], 
  "]"}]], "Input",ExpressionUUID->"499945f1-f1d0-46d0-b996-d6dd4e585164"],

Cell[BoxData[
 StyleBox[
  FormBox[
   TagBox[
    GraphicsBox[
     TagBox[RasterBox[CompressedData["
1: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
SQuHJI6tsg3I0VdFC6rjZI0ZptYCV0uhJ8rEUEuxMgVJKCPg6B+yJdiM4l3U
hdKDWJEUEEb0D8F3gyPaGaJIwaK+RhGda6AeAU8KHUNjYNkcCp9PF4lYaEvv
shuSwZ9JcT6eDAkD5neAiWdhcAxAigWY3mM4hhKGLNPRw8MYfqGUbjIRTcPA
97BrR/Uurk7XVtuJq+ocF2bk3d7Q8+qOqnu7a94fan1/ctCd463Pjo0Cnn9d
nwk831ycBjz/uLXgjzsL391a+OrGDy9v/vj+/vI/H6/5/eGqt/eWv7u/6q8H
q/8CvLcWvrs+D0mhVya9Pjf67bkRb860Pz3S68H++ge/1t3eVXVpY9G5dXnn
1+fvmpu5fLRn9dep3w1JGl1paU6V9ckyDyqKakg3FkZLS9MMaVESi44mlRNp
7KAIche0BoHZSN5Fng8rS0T/YFzXIGwXQIrSC/O6FO1FOy+bgD+JlDBkV5eJ
43CpKE+5t8SjPCNTEjR2M/DkKvnQzFMFJAQmMwJ4ov4EYT76E8monKBwYleV
iAo8K1Lcw5pyc5yslij61gEJV78tvrW+8uqW0ns7q14faH55tN/Ng433Dwx+
e3b8/16d/vbCNy/OTn59aebvN+e/v/X9/95f+vb2j29vLfnz0aq/nq7789Hq
Px6u+uvJ2r8eLP/r/tI/bn4PeRUy55uL41+eGvriRPu7M+3PDvdCatzumru/
1N7YWnl5A9KFHllcvHSEc9W4lB+GpQzK15Q4GT0TFPVpphE16dA1WUThan4I
k/wFldKVSPMn0INQnhDXBG+7Ag4EbqEEPx/Pzst3KEO04qNIfTwZUN//C0+t
w4L4UwG5lebjiaVjUJ4YcgTADCeFRECfRg0FfyLNEiXMKWbU5cT3Losr9rBG
ZckOft3jyoKiqysKr28qfrC76uWhlrcn256c7P/k2Ki35yf+eWXa70hxmfn7
9Xngz7c3FgDPNzcQi/5xb/lfj1b/eX/FH/dW/O+DVX/e//HPuz+8uz735cUp
by5MfHNmzPNj7S9+6//qWP+nB3o92NNwf3fj3V/qb2ytubiu/NzqkvNr6jZO
Tl39dfefOnIG5GmLXew0HS1FR+9XFFcQp4LxzaWDeMezWUFkWkAEvgvaxqNj
JjLueXkCTLAoUIWjz5/o4PmJP9F+6f/D02aGegQ8wZ80IRmNdzwTh6XjsBQM
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
aGGHxCtZqVp+opKdYRImqOnxWoZbTVHyQoEnkRoIHyqIGIQuvqGrx5/wRJF2
5hn2ce0OLUaIvDyRe92p4cATnTcBKVrfP+HZOd6hX0Jh4sgYLDnMW5KQ+xVx
5K8o9EAZj2wVsCNlAr2IpOAFpKrDFjfFnZ1fdeHn2oNr8q5uq3i5txE8eWlv
1atDTS8PNr/Y3wy9E+TDOzsaH+7pd2t7b6/63NvV79G+gY/2td35peX61vrr
EOMrigHp4801b37t82Rv78sbq06sLjm+ruL0pobfVtfsXVy2f0n18RW9zq5p
O7CgbtGAuME1KaWJ2lQzx8aJgOKebhDFy5kpWk6qjh2tJJkE4cCTzwmDyR1D
D/P3bqaj/vy/eX4S7+HeZhWZT73xjnwRA1IoiwT5E0UKPMGfsVFOyJ8qs6Fz
Pw/zkbckIfEOJQkp8ciwicyboAhCONCmckMFglAZL0TG8texv6r00Ja3xW0Z
m7hidPT68d1/+bpgd0fh7nk9V8wr2TUr4+a6QQ/Wjru7aOS1Ob1frW17tLL2
2YbGl9sH3FrV6+bqXs93tj3d2fxid9P7g/1vrq08MrNw06iEhf1MW6dlHF5Z
c3Rjr2Pb+m1cVLFqbumiSXnfj81dMr54TnvGqJ6OftmKUjeph1NSkWDOtkg8
HHyuXpyjE6VKmclyRpSY5BAT7Cq6XICjkpBtIyI0frgQf/AbJSCUGhBK6RZB
6RpO+gJD/IJA7haB+wKD/QoDGLFdgjBfBpO6hFC6+eE+D+3UVsER2SH1fmsA
8ifwZHtbUPQuO6tJDf50xEYBT4lW4Vtf+o88vS1oMNLP48NgjiAw/HicIAEj
wCDBJZnofVKl82osi3qbf56Yun58xrr27hsHZf7YntSnUjK6VjyxwTS/V+LS
3t1/ao47P6f88YqaB8vK7i+tfLq69cainpcXVdxdU39rXe3pRSXbJib/Nrb4
4NjCfeMKjs2rObm46bclzXsXNSydkDOzPWnaoJQRtZ66DHmmjRSrCo1Whzql
/rEqRoZZlK4XxgupmSpegUEKSIGnW4A3ccOtMqJKhGfRg2mUECIxyHtjWEgE
DO9hn9PCv+RiuwjwXXm4LnTcVxRit9CIz/3C/xWI/TII91U4risW1wWH+QpN
nj6e6PoSWo/+I89/+hPdfEfyp5cnuh6Czu8gEhUHaZlC9+fQ/cSMwJxE04im
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
ani6rfXGgbpLvzQ+ODDy8YGvHx8cvee7nKvber/4bfLLAwt2TOg3NT9hea/s
pU1Rv3Sk3lvbdOCblF2Tsp/tGPFy75g3B0a/3j/86e4Bdzc2P9jU+uqXwW93
j3q3p+PRpsGXf+q1bFDkwjbn1DrVlBL9qB7y9lQF9PmZclqimJmkljglfCWL
DFmRTQ7l0oI1YpJBTNLyIswiglKDZbO+ZGI/k+A+S5BTk+UMLTHIJqKTI7qF
hHUJJgQFEgIDMX7h0NiHd6VE+PvuB/Oth0Cz1JknusUJJQnyJ/CMjI3RmYwK
rRL8yREx0HgHAU/wp299Hq1HkAekhK4cVgBXGGpkYyuMmvYeyXlORYWTv7w+
/syUgourio+uz7z4c+69teXXNzVd2D/o5oH2N2e+fn105PNfB97aWHd0YfaD
PW33drefW9Nry9fZawd3X9OWtrJv8t7JlaeX9D+9vP/hb3NPLS68t732zW+t
f5wZ+NelEe/Oj3p9fsKr85OfnRl3Y0/btc1Ne6YmL66XL61UfZcjmFYTMzrf
3BAtzdbSU+QwfgqipAKrgG2VcB1KEY8UzCL685EF8DCtlGBSUQ08iigiQBLm
ryeGxQlZbi7VyiepeLgIzOeBhM/9yF/5U7pApCM3K0Z0xYZ1CyL5ISJ0A6F3
iyFLdpQQBgPDouNAfBZFwmcqBFyjUhbrtEfFxerNJqVOJVYIuWImW0j1xXvn
+Qjd3wSeEpwfjdqNyuymoAYW66Tt2UlF0epKt3BpfcKFGRXX1lUf+zn77KoM
4HljY/25vf2Qb3Mc/frFgVG31jed+D7/5obGp78OPbe68dzKPnu+Kds7vnzv
mDIoWKv7p27pKLy0asi9Db2vrqh++kvL018bnx/pfXNn7d39fa/t6ndn/9Cr
2/tc2dR8Y2Pj5Z+q941P3TcqdUNv9w/9MseXuhtjZLk6NvCMEbOBZ6RCrOfR
dQK6mksS0YIF1ACnhglyaJDbVlWUMFFIlwQZL9eqdfFpViGNC818xL8C8F/4
E7/0I3VFeWIw3XAR/ihJELKn7I16ZIvT+8VDGg3DpGF5bIpYwJQJuXqVLMpp
/SdPgAklnszE+3hC74TuHwFSKQnqWjBHFOpUkmqiNIPy4/KjFSUO/rQc2/FJ
5dfXNZ7fUnpmReb9NSUXVpQeWld1dWP7q4MTz/1Yu2t82t7JqTdWN1xb13Jj
U9uJhfXH5tafndt738iS70ps35fb5lZYf+qXcG1xw+sd7U+2tz7b1+vWzp5n
15Vc39l0a0ff29vbLqysuba67vyPJdeWVZ+aU3zxu5pTs6p+HJAztshR6xHl
6TnA08OjOAXsOJXMKeM75VynkgP9p5IRapeQXQqKWYjV07FaUlicnFfssSQo
BXomDhoqFikoDPNFEO6LAEKXQGJXoIf4E4sgDcJ2+7Cb7K1KyF1PpEDkizPe
r3fBFM9mEyHeIX9q1DKX04LGu48nxDvaLwHPD5ubH/tPLDkEkLJCQ3EEf74C
mxLJb+luai+OLUnS1sTrOlJMu4cVHv++8tjKgiPz428ty7v0U9GJ9dXnl/V5
tHnEusHRByf3eLC25fn2AddW1d/fNuj1r+Mu/tj7wtym7QMzxkYzDo8tPj2j
5scGx7I6y9O1A59s7Pv0l1boUa9vrnmwq//tjb1vrGq6/GPlzZ9qzs4vPDu/
6MDk7N3jc7aPzpnbnDYoQ19u5YA/05SsSD7VxWfEKMUpRmWWx+iRMaMVLCsb
Y2WFRYqI0tDP7Gx8ukFaEm1J0AjUdIxDwZaAeQiQMLsE47v4rBjiveEhHNMV
in4o7uMSE1R5XDeUJxL1tFDkRlA2gSugCyVsNdRBt+n/5okkz4/5E/WnmIL8
70O2aFFOmqwmVdFW4qnLc/XKcPd3KpbXJ++aknt8WdHxBcn3lhZeX1Z8cUPd
jZX9f5tevHNE/OPVLTeXVt5ZXfNwa683h4ff3ND6ZOuQ41OLfyhRraq13vqu
+cyM8n0d6WMTOZsGJN5b1ef8DyVPN/e6sbzy2ZZ+15ZU31nWcHNJz5tLqq/8
UHZ5YdXZ+VX7JhZvG10wpTKub7K62MDKUjNT5exYMTNWxk3SyhK14jyPwSUg
Ozm4SC4uWUxOEZPNmK/SVNzueqGc4C+H9klIkXIJBJxfcOjnYR+2Nf2CcYj+
vcsZ0S0c64/BB6Lf7ozwbhyj32FH/1sVwAVFnCdhKPVSm8f0f8T7h2L0cb8Y
+T+sWDib0hCX4MwsdGWny/KimL0L7HW57jKPtkzMmN7DtrWjx/mVlVeX5j1a
WnRjUdG5ZZWP1g9c0WLeMzru/k81Vxfmvdnb99ne1hdH2m9sbbm6puHQ9Nxl
9YYz00vuLGk5M7t0VX9bq43c5iSenFZ5+duKa/NKbswrvjG35Pz0/DMz8i/D
6DS/8OS8vN9mFRz4pmjX6KKtQwo7iiN7x6sLDOx0OTVJwoiTsJJVoiyrJkHJ
i5ez40TUOB4hRUjKVTC6c3HVRnF9kt3GDIOqalXQ1VIqmRIYhu2CowQjzSdY
MaJbGAZZTAaLol5FeSJz/cftTgw5AEcNItBD0K8Mw5HOJ3GlDLleZI00/Ld6
hM5HODIGhPL8UN+ZXL1R5oqRRNrJsdrw/8fae0a1kaX9vp7pbtvkIJRzzhEF
kBCSSCKDyDlnkXPOORoDxoANtgEDBmMTbGycc2iH7nbnnul3Yve88dx7zoe7
zv1y7i4VVjPdPbPeD3et/9IqlUol1a/++3meXSrtbY7zNMf5JqqEGTzKiUjV
ze6oz5dTv19O+HEx5a+Led+vFj8bTbyQL341Gv3dfOoPl/P+94uWv9wr+3++
GvzxWevj+dSZYul4GvfTmbzXp3N2O4JH0lhmLSHf3fFCjuZPZ8w/Tuf923Tu
H0aSvxlO+Pxkwh9XCr5dy3u7kPp0KmmnJXyzMnw5O6gjXlcRKMvy4iar2NFS
ZrCACur5dF+PdIMymEeMElHixJQ0CbXIk58hIDf5eyZ78dRkx0AVU8xBOjgf
QRBA0Q5dQAZx0sXNzhVhh7DwdEIfd8DZ2ONsILYo258ugeJsoa4o0R5NccLR
XSGeVASFhWEJKBIlT+ur+kf10mGeKIIrEu9yED/RaAoVweY7uwvtdDyH7DBl
UbR/ikqcSEePhMnuD0T/biXzrytpPyyk/nW+4Nsz5stV/iOR1Pks0WKB6PF4
1LdXzJ9sF//wevD51cozHcENsczRbM/ZkoBmE7s8gFASSBjI8q8P5uZwPrya
q/3Xk/k/Dqb/v2cr/u10wbdTad+cz3k8HbPV43e9P2yxxLBujjiT4Fsbpirx
k+T7SAr85ClqUbiIbnLnZPp6VEUHJKv54VxsNAeTI2f1mEBEUmVzSUYeJkBM
lDJcUG5H3IjHj6N/+xHqQ9BtdwRFO9Ie4WYPeLogjzlgjtvhjh3HHwOcD+4b
ge/Bw0MCSJEkBwzVMswdFUFjYTgCkruC561X+AT4Kzw9xHIJqOcZPMphf8Lx
E+ZpuaUBup8B9I/wmGMMhq2fmpwVqmjNiW3Nio8S0BMoLjNJno+Ho78HPaCl
lO9PJX99IuNJd8p0urrKC9kfwegIIYxniTYHonbnsu9s1NbmqmIM2JwgflGg
MEfPMYlRIUKXgjBJd7p/pT+nVoMf8iXeLfT523Du/1ls/N8r9f9xsfKrMxlP
T8VcbPScLpDN5mrnM4zdPrLSQEWWhpfvI2tLDktU8ZM1khw/T5OUURSkrov2
jeCgoznobDmjxiCv8BAWSVnJBglI9DTcR46uR+xxH9gQjh7FfnQce8wJZw9a
upubLQoFxUkH1Ec2mI+O4z8CYO3Rx4AcscedcDZALgQ7FNkR8ISaPNmZRHFl
sLB8Ptndna3Xyn2NAYCnRCE9zNOSkg7ut4Es+v5+RSAa1pZKsGHT7HXuxOxQ
r+qEsIrIoCg2KV+CXy7y+WQq+Zv5hO9m476dSH7RmbBRFNgXpzid5/v7te6X
MxWt0ZziMHJjrkdKJEuncA3wIIZ4Mv14RD0L681Ae7FRfu7UGAGizMBeLo1Y
yfddSVU+rAr+/VD2v5zM++tC8VezmZ/OpV5tNZzOc++N4vdHqZsM7uYAea5e
UhyorjH5A54xcna6Tpauk0TLqEVGeZyEGMVFZ8hodUbPBqNXtV6RZ9JrRXgC
8rfOyCMO+A/tyTYOFHt7/HHoWgcK6hOhkceRIA1hjkLXQ6h2gB5gCGAe8MQf
cyXZYqiOKKIdNMYL0YlEdmExMAIeSSnjGrRyv0CjUu35T3hCFj10/yeTaMsk
QT0OrZCU4qdO03uka+XpckajH2ejwv+z6eS3k5HPh0KfdIZfLvSZipH3JCse
TJW+W2l/faH+1qmi6kSRv9LO4Onmp6PqVBRPLk7NwqsZWC8OUS+hunNQ8VzX
Sl/2blfWk/HC/Y64VbNuo1j/Zijt9zMF385kA6T7nUHzRerWUHZ9sKw+WJ3h
JUr15Of5KDO8ZQlKQbiAAqJomlYQJSVlevMytFxQlybL6aB3XOyjrA815Eb7
K3k4IuYjDOgH4UAB/wHg5oD6wA19FIM8ikceA0Ijj7oif+uA+o0t5jfw7Q2u
ADjRFggsOGOPAtpIgi3gibMMIMakowUcsoeU6+sl9w8KtPKkc8nw9ZBf8rTe
D8am2rFIdlyik7eQHiTjBQsYSXJ2U7iqP066VqF/fiL2yWD4tUb9WolmNl01
n23YHE39eK3h2WLFi+WqL/Z6nlxpPTWQEh/FUyuQCpGblOrixcXpeQSdCGfU
0KODRKVe9LXGlHtTZZe6Eu7Pmp+eKd7qiL5U7f92POPz8dTXg9F32oMvFGs7
YySlAcLSIM94BTfWnZ2pUyR5iGJknEgRLU7BKgxUxcqpsQpKhp6f7StK0/IS
PNkpXsJ8o9qDB7o1oOPzAYFsjybbIkk2RKYzg+1KIdrS8DY01FGi2wc4xG8w
6A8w+KNY0nEk9rgb9LvnUVf0B86YD1ywHyLwEEw03hbAxOIdCARnBg0FeKok
HJgnyEc/42mNn7+8v45JsWeRHbhEFw2P5kHFgnya5c0ZyvBeKPe72hz8eCT+
RkfIhRLN6VzlQqnv3ZGcOyslr7brXmxUvrpc++5Gx+OrLecmczoaIzUKhFqM
kNPsVVT7GC9GToQsN1Zemadfqkl8OtewO164eTLrzW7Hg+WqnfHMyx2Ru80h
j7pNd5oD7naEXCz3Gc3wzjfw0r3FMXJuhJiRpBbHK/hGJt4kpmfoJFVRBnOo
KjdAmhvknuYnjPfmhauYWg5ahLEluNoQkbZUvBOT7sbhonlcpFSM81Yx9Aqq
r5LuK6eq+RghzZmOP451O+LidASD/giLOYrDHsNgj6GwRyFB44wdwxDsQGMH
SCGeVAyfQ1ZIeAYvpdWfHCEL8ATtncLCHf796PD9n0DgPLJILjwiUskkqeiY
eDWnPFQwUajbH0t5NJnxcDRtrTpwMttjyqzZ7I1+c7Hy3pWKl9cb3t1q++R6
y/2Vsr3zZRcm8yf60qvzjSY9K1JFTdKwGpMMsy2pK2OFZwbSnpxtfHd18PZC
1e2L1c+ut99aqXy4Wnd5IP5smXa3xXijOeDpSMJuW/S5qqjqcM8CP2WchwjU
nCYJGwjwBF4FPDP1wooobV6wPMVPEO/LN6ooGgFWRHfhEOzxrg5UjAsZ40jC
AGM4cciOPLKdO8PJneao5SONMrK/O9lHStZJiCoBTspyo2GPQ77F25CwR/EY
wPZDFPojN/SH0NAEJGeAFHTk6XQsl0uVS3k6L8Wv8rSM3wv13w+68NDNySj4
fm8y0ZGBd+WTMO4MYrAHL9WXVxcjutga8mg26+npvN2OuLPmgKlCn3NN4fsz
2a8vVz683rg+l7FzNuflVtPmZPZcd8KpruSTnZntZbGFkV7ASD3poYuNOZd6
856tdDxabXm02Px6u+/uat3N1epbGzW7i2UPNxovj6Weq/e/1BKw3RZwfyTu
1lDqSmNiX0pQXYR/sk4eqxJGy7jhQkakiJHkIQCZPUMnqE/0K43RxvvyEoMk
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
WadaYtdGCk7VJZSFyaoi1aAHVBumqovWtKUHXhyu6i6L6SyNTg0EjVEY50HI
9GHVJ+nNJnVKsDxQy8ehj1KoLkyis4SBktMRGqZznIZSES0dLvPfOJG2N597
e6Xg5sWsu+v5jzbNt5ez9uZTbpxJ3j2fsrOQdGXadGUyYv9s/M35xDM9hrpc
+syYaW2puKhA5WfA+GqJITp2boxfYoCHPgT6/d3Cky9gMzh0CoNOptJJWGiU
aTSWgaJxsVDdy3AUU2zkNFtv1pHKZNniYObT9fYXl1q3x3OmawIvdsddO5Fz
Z7b89lzlUnfqRI1ppjmlpyi0MFxSFOJZEaltiNU1xqoHMw0n83wHUhRd0fzJ
HK/BVGVHnHu9SVYeKss3yszhXuZw77oYQ66PGBSQqV5ck4xYECwpDpeNVkef
7cq40J89Xh11uin5XFduWYQyL0CarGaX6IWl/tKaWO/locqeirjOiujabN/y
RHW6HytWiS0KlVUm6JKD3EMNQgEXRaE68QhOMqoLKIpMCmJ5lGSu0XT3XOk3
97o/uVX/6lbV4+vmF7fKX9+qena16PV22bvdqgc3qvavmu9dLbl/2bxyMnqy
3XdhPGbnUsXQYIx/EJrEPMLi20kkGDEbp2RTAhVSfYg/NN6aXCIQ8bkcBpNB
oTPIFDqBSId6nTQWksNDcpn2YrpNgAydESjYOW1+vd3zbKPl5Wbbu72+m7Pm
2abQtYGk3Ym8vVPmveny+ZakYXPwaFlUZ7ax3KSoCHPvzvTvz/WfKAtZ607a
G8/ZGUnZHIhd6zEtNAVtn8iabTSNV4W1ZOgb030aM/w7U4Ja4v3yDKI4KSnO
nVgQIMwz8kEum6iO3Rgr6c43ducHnW7MaEj2TdcL0vWiPA9OtprTkuR3vq+0
uyK6qzp2oCGhOkOXZKDFqvAxSkJVok+eycsgpwrYCCrF3p3opCQ7xHjQigIF
PVle1yay3+02vbvd8NmDhic3S25t5z64Vvh4x/xks+jtdvnbq+U7m0Uby5k3
Nst3V4uXpjN2VqoW54pTk4QKlZNCg6Zx7EFf1V3KUEl4/ipVhM5HH+Kr0KkE
ShFPymPyGFQWhcIkUeg4aIBxOoLHQUi4TkqOncmbNFoX++zK0K3z5XcWK/fP
lT3daHi13XbrfOnqcMpMS9iNMyV3zlWDanyxK3XUHHKyzNQLeIbKeuLdZ4r9
Z0v8dvpTn58re71c8fHFsjfrVbdnMjeGox+eN9+YzlntTbgyknG+NW65M6k/
NbgjztfsIyrQ8Yv8xPkGgdkoLguRTlTErvTmNyZ7tWX4tqb5t6YH5wfKkzTc
HCW7UCeui9GP1aQN16eOtKa3loXnx8hjtKRUH7aGfKwiXt9dlhSq5Uh5aCEf
pcDZhEkJhUGSxgTFcnvMJxv1n+7UvLpW8cnDhnvXC7cvpe9dybt31fx0q/z1
VuWjxYKrF9Mf3azeXS+6dbX+85fTZyYKfL0xfNZRkdBFwEPIpES5hOEh5Wpl
Ep1UGqzWegdqJV4yqdadKmIQeRRQbtJ4ZGiiCgZCykUp2c4GkXNJnHJnrubJ
RvfefM3mdPb9tZrbyxX7i2WvrnU8vdK0Ppl1pid6Yzzr3oXaB+frL/Vnna6O
OlEY2JuuH8oKWDb73myL3+uMe3gy5/Hpwnfr9U/Olzw4Z947nXVjJvvZxYpn
ixW3pnKezJm3ehKWG0IHkv0aw5QdMTqgSn9Zia8QRMiuZJ/JspjVnsKxEtNM
XTLg2VsQ2ZRijJZT8tTCHK2oLFxTmeTTkBtckxeUE6ssTFCnBgqj1DQP0jED
xzUnQh1lEOpkZBkPGch1AzDrY1XnWuI/2Wj+aq/1y/2mVzeqHl0rvblVeP1K
4fZa3v5Gyd5iwYOV0o83ap7tFd24lHnnavGXr8ZPDiZLBR8KWTZyAVIhxOnc
6R48opSO0QoYBgnXx10UodfqQ7RijZjjwSdL6UQxFdS4VAGBznDj0ZzE5KP+
QpfewqC3W0Nbk0U3zpbvL5TfXqm8s1p1c6ns2XbLZ3eHPr8/srdYvnk678p0
/v5CJbDoal8a+KpD2bqxHMN8lel6veleT+rT8cKXs5Uvz9U/XWy4c7b6+lz5
+kT+5ZP5e6eLb5wqvDmR9+xM2b0TOdudMXPmmL54fW+cvsOkaQhWVvqKawKl
LdGapeasSz0F46WRwKijZdEjJTEt6UbQ90+Sswv9VclevMJIdXtxdHqEoihJ
nxgkDvGkGmVEAfq3SqojKL/TwzxBx1zBdMzyZtTFKAdyDbsnc7+63vXlXuu7
/cZXN+te3Gq8tV1xbb3kynLRzpL55sXS+2tVdxdLb67G3b+a/eJe/d5Wjd7b
kUo64i52A06Ts7BqDkHHp/gKad48soZP8lcJYgK9DKHeEi8RU8GhujNJEhqR
T+BIKVwWwpOH8KR+1J0b8Gaj7/5C7eZY5p3zFbcvVLzc7XxwufHeev2ndwbf
3h389P7w2umcub7YKzMFewtl26fyl7vjL3bEzlQGzVeH7vRlfDpddncg885w
zq2xoofzjdemq3bPNF45Xbs8Xro1V3v9TN3uZMnuWO7+WO7DifxrPfFzheGn
88JOZBpr/EXVfqL6QFlTmLIuRHapI/dEYeiYOWSqMgbE0hNVsaAzle7HTdGJ
EzT8LKMc8KzNCMqN1hQlGfITDEFqZpg3X0yylxDtNSxEcZzB5EEzeVLLQvjN
CfJTVSGPFiu/vtX1xa32bx73fP20/+Xttsc3Wu9tt9zcqNtZLLu32fhkq/n2
Svntrcyb2zmvX/Z1dYdwRL8F2YfFcRVwcQIaRkrBaLkUHxHdk0tQiyhGvSQS
NPggjbvOnaPkMuRsqphG4eOFEqKYixDgf1ObrP10a+jj1XYQ3NYGk/fnS28u
lAKYj640P91ue3Gj+9m1rufXuxdGkkebg1cmMh+sNWyfzt8YSZtvDl/uMK13
xjw5U/rZQvn+YMr+SPb+RNH9+fqrJ0s3JsvPDxbM9+WChcvjReuDmTujWTv9
yXfG0lbrjUs18WdKImaKwvsTdcCoTSGKzhivGXP0Qm1SW4LnmDlorjH+bFvy
mbbUuY6MhkxdS0FsqIqW6CvKDJEXRnv1VCQWxhty4wzhvtLYMLWcixZRHSO0
7KxAaQjfLdeXVxfBHynw3j2Z8/V+9zcPet7eav3sfufzGy0f73e/uT34dLf7
4XbHncuNT/fa72zV3dgo39zOe/qqd32nTmNEE3hH6RIUmuJEY+LoFLSAjpOw
CBIWTi4ge6tFvn5Kbx+5V6CXwqDiKvhsKXR/HZdLFLHRMrpjuCfh3nLnqyt9
l0czAKKr41nAn083mh5uNL641vlmv+/5bsfj7fabKzXnRlPmh5NuLFU+22rb
mi3Ymc69ejLj1mz+/qmcRwvmBxPp96cyHs3k357M3h3L2h7P2xovWOxNOVFu
vNiXvNaXtN4TtzuYcLUn8t6JpCvtgfPlEWdKw04Xhgwk6QcSfdojPfsSDedr
koaz/fsz9WMlgacaTCtD2RcGMk+1xU13JI33lJRmBMT5CbLDlJWJvq0F0Xkx
+qQwdbhREWyU85iuIGamh6mSdex4GbrKKOhPk690Rb++3Pjdw4G3d9o+vtP6
2eO+F/sdn9wb+vzeiUcb7ffXmx9utz680bR7ufD6TvHdN2OX7/WEpgnQ7CMI
+nE0C4GiIshsApmG5vFIXDaOzcEplTwvnWXyXI3cK0gv16n4Mj6oPiV8poxD
FpGcDAJ0T2nEo/Wea2crtqcL1sczHl9quHG29M6FKpCDPrvT/82j8S8fjj3b
aV+ZygYwweOTrbaHm03XzxeDVPXJtfZXm/VAj5ZK1rrDbp3K3J/K2OiNXWqP
vAHKqpO5ILHOVQet9ySstEautUVs9cdc6Y641m9aaTScqQhfboyfLQnvTfQa
TPGZMZtOFUWcLjOdroicqTEttMUtDaRdOpm3Npl/fizzwomsrvbM3rasvDiv
tEBJdZJveoDE5MWNDVRlpoX5+buTKHZSASpEQ0v2opT7sVtDBDNlutvT2V/t
d35+v+Pl7aY3Tzq/+Hjki6djn9we/OLO+MdXex5dbn603Xhrt/za9YKnH9dd
fzMbnCFFso+gmEcJHFdoGg6yC8Uy7Rebj2PxsEIpTa2VuSvFApHQw1PjGWiQ
aVViqUjC56jYbE8GWUNBlsf6XJtv219q2pwpmu6KvDpbcGuxCvB8u937yc2u
L+8Nff9s4sdPF+5eqjs3nHRxMmsNeHK+eP9i1f2NuqdbzWCbJxvVb64131su
nmoKXhlKvjSavj6ctjGUAULlSnv8dLnxSk/qekfiqWKf+Zqgrf6UnZG0xZbQ
4TzFUkvcdFnIQJrXiVz/aXP4uerEiaLwhdqEi+0ps/VRy/0pmxN5K+MZ6zP5
G2cKT7RHdPfnjgwW1hSF5kYqQGmUZZSFeTDjQ9UF+bFaHxGJ7sBi2KnYDvEK
bEMIbyxRtTsU/+lGzb886f/qec9nL7pfPul4cLPp0fW21zcG3u4OfHZt4O21
7md7TXf2Su4+Ln30pjy5JsCOdoQidkQSP8LijpMIDkScHRZzlESxpTDsGDxn
kZQgdWcKuAwxl69XeiuNOolGIZfLFHyBB4OppZKC+NRz3WUPVgeuXaifG0ra
OFOwu1h2baH06XrrFzdG//Lx1I9vTv/wdu6/vloEaX2uL+bKXOGFE2mrp3Ku
Lpg3Z3NvrVQ+2256db3l8Wb1bHfw/EjWBcBwvODKqdLNE0Vnm+KmykLma6MX
mxIud2acb4hd7Uy9PJhzZTR3qStpvjX2UlfKfF3kcI5htsJ0oSF5Z7D0Ykv6
enf2jcnya5Pmm2fKby9Vg7bwZLf93pXmUwOx5bWRra1JZTl+5gR1mBRr5KMC
pKRQvSTQqGAI0CSWE51uY/TA5/oxT6R73+3K/PpKw5/u9X37oOPj2w0fP259
cLfh5k7Nyzu9n90eebzS8vZq92c3et7eb3vysOreE/Pyjoni6YTkfeCMP0Ig
HacSbPCuv6G4fUhC/YaEO4InHKHQjzLZTgwags8geQqlvjIvfx+tzFPGlQuE
PLoXFRNCdenK9L++3rq6UndpvnZ9tPzmeN3Nqaona3Wvb1Z/97zpL1/M/vXr
83/9ZvlfvlpbnK2aGio4O1qyMGw+P5C7PJC5Ppr1bL3p3nL19YWSxbGU5cmM
vZn8zZMZD5ardk8XAKMudMWsjaRN1AZPN0dMNYad7YzfO1PxcKX5zvmGxb70
s93JVwbLzjdnjhSFnmlJWxksOFkfvTFh3popWZ/Ku3+p6dbFuie7/XuX2m/v
DF+cb+xqSc40+eQmBBamhkUFechFJBrFxUMt9A3Q8EV0MhlBI0D/KE/wZVTE
CrfGMr+91vH7N0OfPur+7OngZ8/Gn9wceLDd92r/5Ls7p19fG3u1O/p6f+zR
reHrt3pufjz28seVgqEgLMsew7RDUm1cScedCcctN+HYOWEdXXFObngEhogi
UtBkGpbJIklkbLWXNNDoI/WQgpJeLuUAnoky6s3ZprtbPSvLNWtna3ZO1T8/
1/v4XOujtdpXe9V/etv156/m/vTF/B++XPzr76/sXOo62Z8z2ZNzqitrtjPt
THvC5njuznQByPKb07mg+e+v1l6ZAIVW2c50/t6c+cpEzlJ/IgSzMXyuPXp3
pvTZRsfDi61P1jrO96QuDmZeGi8ARebZxpSNoeLl3vyp+rit6crXu0PrkwU3
F6ufXu14d3f8wdXu3ZWWx7cm1863tNTFZkf7xQV55ieHhBtVHCZKKWeHhOk5
PDIK40DEO/IZrnoZpjhBNd+Z9OlW5x/vDHzxtOfbVyOfPhl4cbf3zcPRTx5O
vLkz/uWDU5/un/jq/uSn908+uzf68Nn4lz9evfH5DC/UCcd2+Ikn3tYJB2QP
eEIDeBLcsCS0ladIwlR5igw+0OSGAk+xkE/WMrEFPuJvbs3c3epeW64B/rw+
0/TsQv/z5Z6Pr3Z8/bjnf/x+6sffX/jjl/Pff37+b3/Yfnbv9PRI4Whb2lhz
8nhT3FxbwoUeKFQuDSTdvVj78no3KAAeLNdsn8oDngSl6fVZ82RdyHh14GRD
OCjmX28NAFtuTZVcn6083RZ/tjsFxITljszzrWlbJ8ouDRfdOd/8yd7Y5nTJ
3rnqe2uNb28OPt3q3rlQuzhVevlcy/nTdeZcf2BObxnDFOgZ7KfkMDDu7mxv
bzka7UDCOdEJ9moRJs6f218ZdnO+6ssbvd/sd3/2qPPzp30v7raDDP76Uf8n
T0be3Ov/9P7gJ7f7vngw+ure0MvHJ+4+GX/1/aWiPpOd4AjEk2HvRjnuQjxm
ubHhwJ8wT9ifoHvOYpMBT6WHUB/g4+GrEXiIQKdez8V2pRv/+mxxf6NlbbHi
8rnavdnGR/NdrzeGfvf41L9+Ofe//rjwr39Y+cNX5/7lq4t/+u7yF68vLs/V
jbSmDtXHn2yOXxzMOtedAlLGQnf87aXavQtVG9MFtxbKAeFzXfFPVptXR7KG
KwL6zL6nm2Nebw1unyo705641J8535O6PJyzM1sJqqClztSrY8VLvVkPL7bd
WWpeO1lw43zN4822B+vNr/b695fr12fLZodyTg3kdzUmZyZpM6J95RycWsbU
eop4PBqTSSSRUESsMxPvxMMfD/OkVKdqLwxlPr/a/m6/+4vb3V+C0n2/+eP7
7Z+96P/kWS/Ql8/7AORnew1fPx9+eb9nd6vx6o2eO28XeP4Ye/4RLNMBRbMF
5nTCH3PAQPc1OWBsHTEOoL0jcK5oAhLwpDLwbA5FLGVBPEOMYi+F0FOo8eBq
mM4Xuwv+/c3F7Qtly/NFlxcq755ve31p+Ps7s3/75MJ//m7pv74/99fvV3/3
5YW/fL/5uy/Wvv1sfWetB/Dsr4kZqo5a6Mm40Js+URdxridp9UTO6njuuaG0
S2NZVybzQZED+piT9ZE9hT7D5UFXJkofLLfPd6SPVEUOV0ZsTlasjhYCXRzO
X+5J2xjLvzFX9WC1bWPKvD1X9uBSK2js+0s1IHg+3+k/O5Q92Z0x0JySHueZ
neidEOqlFJOlQqpAwGCyqDQ6CYtyYRIQXKytlu1cGqsEp+zOcs1XD0fe3e99
e6/73YOuj283vXvS/c3bwc9edn76rO3dy7ZPnzR98rDpxe36vSsVG+tV1+4M
Ty43ufCPOgntgDlBY3eBbiY5epinCwihWBcU3o1ARgF/QjwlHMDT09/XXaeR
eopkAkKokvTwfPtX+6Prs3kbC0U75yueb/R8e/PUD88v/OXNwr9/u/R///ni
H79f+5ffrf34593vv7nyu88vX9/oB+19oDZ2vDHhdHvKWE3keE34XGfiCsjX
I9krJ/NXhjNBnlobyZ3vTO4vNg6VhgKMS4OFV6aqhytNXYWBEw0J4OnyUNH5
vpxLJ0qW+pL3ZsuhGdNWm59v9dxdawYYQdl2ZdZ8c6nu0dWewfrIgYb4yhxj
Row6M947KUrnIaMJeCQOl44n4shkIhHjxkA7KihOJiV+uDjg6UrDN/cHv3k6
/PH9zlcPAc+O718Nf/6k8/mtmud3a1/cr/n4XtUnj+vfPWu5tVV87UrF/s2u
jZ2+sFQPV669C98ZmBNBtnEmHAU8LXcxQe39wJ94ZxTBFU9CkqgYBpMoEDLl
wJjGQLWfr6eXu5yDacsP+2x39OHF2q35vJ0LRTeXK19v93y7P/6XZ2f/9Gru
33+3+D9/uPTDX3b/9sP1v/xx929/vvXdu82Vsw2A52hT0vxg4URTYm9x0Hx3
+unWxKXB3NnOlHP9WXOdSdOtcWDl8lBeZ4H/qebk/pKIjryg872FJ+uSqhI0
kw0p53oA9tLTralb07Ugxi4Ppu5fqAZt/N6lpptLNbsL5eARIL2z2rQyWdRf
G9lREVmc5lueE5oQ5hkXqVbJ6QwWlsVnoAg4DA5LQCOYaHsdyznLQDtdE/LV
Xvcfn4998aTv9ZPet29Gvnna/f2rwU8etD7cKX18o/z57coXd6rePmp6eK3s
3vWa/d3GC+crKhsiBZ54ohjtxITGP4TNaY/50MFyQzjwpwPaHuaJJiIAT2BR
Kg3H49Pd5QKvoAiu1N3LU+Yjo53vL/p0d/DOYvn22ZyrZ7Nvr5SD4vbdXv+f
nk//8NnZ/+uPq//xp+V//7e7//Ufj77/bvs///bwyzdrII4NNSdPtGeMNSU1
ZBj6ysIWBwrOdmVMNMSBjD/fm3WmE3S0U+a7M0eqonrNYa3ZAUUR8vac0Im6
9PoUP3OE6mRdylRjKtCFvsL5rtzNiZzLU7n7FypBwARdv5srdbcvNZ4dSt6Y
LlqZLBxtih5piq8rCGosjspLNgZouD5atpeGDU2rzSQiSXgMEUvCIoRE52AJ
tilRudIZ++nVxs9vt3/2rO/N6+EnL/s/vlH78ErJ093KF/t1j69VPtmrfb7f
8HC3Zm+9bPVs7nBvTGW5Ue9HZ0tRDrijrnQX2Jl26A9skR/aoT6y3LtoY4c6
Dto7zBNHdANIKVQs4An8qTZGaHQ+IJYnB7g/2xh9ttH2cK1qay5rZz73zmrZ
i+3md7f7//XzhR/ezf3w7bkfv1/84Yf7f/vbw99/s/ufPz66f30CFEvnTpSd
GSgcqY0/P2i+NF4505453Zp+ojZ2sjFxriNtui15qiVxsjmpvyyyJllfn+Zf
GqOtjPdpzgwtilAXRXo2pAf0lcRMNKTNdmSDE3pxKOX6fOn2mRJgy/3V+s0z
pcsTuWvThVfOlo01R/VWh1dlGyoyjZV5kRF+MoMHWybBMlguFDYaCUokKoFE
J2JRDgKyU5AUXR7JW2iJeHyx/OvHfb/7fOrdF5NP347eu2zeW869v1n+4mbL
y/02kNyf7XVtzpsne+OrCjTxERw/A0nhgSdQbVE0R1eygwvRBjjTxu0DGKYd
6qgt8hiQE9reMoanKxrnAnhCY69ZeOqDYzw9tF48VnNm+Hd3z4DQff180c3F
ojsrpY+v1D/ZbvzD66kfvzz3b98t/fnrc999fvbb7269+2znz9/ffXJ7brw7
5+q5tgtjZWf7C6+cbtiYqp3pzB6uip1sSh2vTwRIgc70ZJ9qS51uz+gxRzZn
BTWmBxeEqXOClEUR3p35MfWpweWx+pbs4OHK+Jm2nFMt6YtDqZdO5qyMZ62c
zF09VbA+W7x1rnpzrvzcSNZgXcT5MfPZkeL8RF1ZVkREgEIlofD5CArdkcqB
5rHFMQhkFkkopKZE6nsr40FfANTDb/a6fv9m6t2byUfPhm8/Hbx/tXJvxXz3
cs3DrZZrS7Wr08UnOhLKM7wSgtlRRrbOExvgw/bx4eFJNjiagwvuGKg57dFH
D5kTID1uDw0JfsATg3cF7R3mCdq7yhDs6+3nL+IMmuO+3J/av1i9d7H82vni
F7ttT691PLre8frh8H/8cf3//K97b55O7V3rvHhx+PR008xk3UB7dmtZ5MJw
6Xhzam9Z5FRL5kKf+WRj2nhD6smG5KHKmPHahPnu7LO9ebNd2T2lEVXJhta8
8MpE/+IoQ1Gkocec0luUUhDmBdjWpxlbc0IGymJm2rMujmbNdMSeaotdGEyf
H8q4OFW0c6Fu7XTJREfiVFfqmeGisgzf+ECpOSM8yeQT4qvkCzFMDpLMgiYd
QFHQOBqaxkAHGETlWYE9lVGXZys/fzT13afnHt4fWbvafGGjbmU2+/xk+oXJ
7NMDaU1mY36CKj3SPSZAEOknCPbhB/rwFO4EH4OATHPAk+yQlntoQdgEMIEz
YUF/kIeGtHVEkaDbOEF7ByWTlaenT5BO6amjEZY6zH99tbR/ueHapeobqzVP
d7v3N1tvXev6n//j9v/6zztt9aG+erSXFumhoqsUFAnHJcKX21OdUJ8d0Jof
2JgV0F8eM9mc1VcWe6I+bawuebAierQq9nRL+mhjYrs5tDrdZ7g6pSkrNF4r
aMmOGaspKIzwyQnWdhUmlcYacoMVnQWm1pygoYo4kL8mm6LHG03THUmzfekr
UyWbZ6pn+zMmOpJXpipaSkLB4SdHeA51lSdF+SdGGz29+BqdROjOdCO7IMlu
eDrGFXUcjfoQ5XwE53yEiTuidXdOjBEVl/hW1UdUNkW21QUW5yizEiUpUeJw
X7ZRQ/dTMbykZA8pSadmE7BHTZFeuflReIKtK/JDtKWAh2/5trR0QBWkeDsX
AjS0F5oMDYsKzAn6R9DYlXyQ38XegcH+GrWRS7oyUvn1g+lzM9mrF0rvbHdv
Lzc9uTv58uOFMwuViUkyIe+YVIYQSlFCPkElpfqo2TH+oo6SmIpEbXmcpikz
oD7NF8DsLU+YbMsBYEE8PFmXOFmX2FUa0VIQ1FMe21MWH6vjZQar+0szS6KM
ucG6ifqSmuTwvFBNdbJ/UZS6Lt1/uDphpCIURF1Qeo3WR4+3JJwfK1yeAOZM
nhvI7amJTouQxBoFkf7iwowI0CHSaSQKlcDg56nQiLFUN1eCC4aOBEfqgjyK
xByjkO2YdEcy8UMCfOGCZ8sW2HuqXNQqN389Lcwo9PPmaJUMnQfHoOGDIkGp
oAeHeJ6c6tR48x2cjwCYbqjj1v8b/pIn8KeVJ41O5PIYgKfG6K9XSYxszNZo
+ZePTy0tmpcuVm+utT29O3vz+lSQSUDhfcQROvAEbhIFlS7Ai/kUuYjm78mN
8RVnhsgr4r2bMvzbc4O7i0xTLbnnBiunOwp7S2MGy2NP1CScALG0LaOlIKQp
L8Qc621Sc3LCdIUm/+acpKWB9urE8PwwfV6oFli0PEFfHKMGPMerY0CUmG5L
Ha2LH6yNBT2FEy0pp3qzhpoSyzN0xaneccGSpAiNj4bvp5fTKG5UBpErYDJ5
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
       "], {{0, 150}, {112, 
       0}}, {0, 255},
       ColorFunction->RGBColor],
      BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
      Selectable->False],
     BaseStyle->"ImageGraphics",
     ImageSizeRaw->{112, 150},
     PlotRange->{{0, 112}, {0, 150}}],
    Annotation[#, {
     "URL" -> "http://www.wolframcdn.com/waimage/hset028/e86/\
e86982b90696704c0aa8d78d03f35af5_v002s.jpeg", "Dimensions" -> {112, 150}, 
      "Source" -> 
      "http://www-groups.dcs.st-and.ac.uk/~history/PictDisplay/Galileo.html", 
      "Popup" -> "hset028/e86/e86982b90696704c0aa8d78d03f35af5_v002ms.jpeg", 
      "MaxWidth" -> "MaxWidth", "MaxHeight" -> "MaxHeight"}, "Image"]& ],
   TraditionalForm], "Output",
  CellSize->{550, Automatic},
  ScriptLevel->0,
  RenderingOptions->{"3DRenderingMethod"->"BSPTreeOrDepthBuffer"},
  FontFamily->"Times",
  FontSize->14,
  Background->None,
  GraphicsBoxOptions->{
  DefaultBaseStyle->{
   FontFamily -> "Times", 
    "Graphics", $CellContext`GraphicsBoxOptionsDefaultAxesStyle -> Directive[
      GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 1, 
      "GraphicsAxes"], $CellContext`GraphicsBoxOptionsDefaultTicksStyle -> 
    Directive[
     FontFamily -> "Times", FontSize -> 10, 
      "GraphicsTicks"], $CellContext`GraphicsBoxOptionsDefaultFrameStyle -> 
    Directive[
      GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 1, 
      "GraphicsFrame"], $CellContext`GraphicsBoxOptionsDefaultFrameTicksStyle -> 
    Directive[FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"]}},
  Graphics3DBoxOptions->{
  DefaultBaseStyle->{FontFamily -> "Times", "Graphics3D"}}]], "Output",
 CellChangeTimes->{
  3.706918815833688*^9},ExpressionUUID->"698dd2e8-a4f5-44dd-b044-\
e7c4fc17b553"]
}, Open  ]],

Cell[BoxData[
 NamespaceBox["WolframAlphaQueryParseResults",
  DynamicModuleBox[{Typeset`q$$ = "Galileo", Typeset`newq$$ = "Galileo", 
   Typeset`chosen$$ = "Entity[\"Person\", \"GalileoGalilei::rxsr7\"]", 
   Typeset`open$$ = False}, 
   PaneSelectorBox[{False->
    DynamicModuleBox[{WolframAlphaClient`Private`show$$ = False, 
     WolframAlphaClient`Private`assumptionsQ$$ = True}, 
     TagBox[
      FrameBox[
       TagBox[GridBox[{
          {
           InputFieldBox[Dynamic[Typeset`newq$$], String,
            Appearance->None,
            BaseStyle->{"CalculateInput"},
            ContinuousAction->True,
            Enabled->True,
            FieldSize->{{1, 40}, {1, 
               DirectedInfinity[1]}},
            TrapSelection->False], 
           ButtonBox[
            TagBox[
             TooltipBox[
              StyleBox["\<\"\[RightGuillemet]\"\>",
               StripOnInput->False,
               LineColor->RGBColor[1, 0.5, 0],
               FrontFaceColor->RGBColor[1, 0.5, 0],
               BackFaceColor->RGBColor[1, 0.5, 0],
               GraphicsColor->RGBColor[1, 0.5, 0],
               FontColor->RGBColor[1, 0.5, 0]],
              DynamicBox[
               ToBoxes[
                FEPrivate`FrontEndResource[
                "WAStrings", "InterpretationAssumptions"], StandardForm]]],
             Annotation[#, 
              Dynamic[
               FEPrivate`FrontEndResource[
               "WAStrings", "InterpretationAssumptions"]], "Tooltip"]& ],
            Appearance->None,
            BaselinePosition->Baseline,
            ButtonFunction:>(Quiet[
               WolframAlpha[]]; Typeset`open$$ = True; 
             WolframAlphaClient`Private`extrudeFromFastParse["Galileo", 
               Defer[
                Entity["Person", "GalileoGalilei::rxsr7"]], "Fast parse"]; 
             Typeset`open$$ = False),
            ContentPadding->False,
            Evaluator->Automatic,
            Method->"Queued"], 
           ItemBox[
            ButtonBox[
             PaneSelectorBox[{True->
              TagBox[
               TooltipBox[
                
                DynamicBox[FEPrivate`FrontEndResource[
                 "WABitmaps", "OrangeSquarePlus"],
                 ImageSizeCache->{10., {3., 8.}}],
                DynamicBox[
                 ToBoxes[
                  FEPrivate`FrontEndResource["WAStrings", "ShowAllResults"], 
                  StandardForm]]],
               Annotation[#, 
                Dynamic[
                 FEPrivate`FrontEndResource["WAStrings", "ShowAllResults"]], 
                "Tooltip"]& ], False->
              TagBox[
               TooltipBox[
                
                DynamicBox[FEPrivate`FrontEndResource[
                 "WABitmaps", "GraySquarePlus"],
                 ImageSizeCache->{10., {3., 8.}}],
                DynamicBox[
                 ToBoxes[
                  FEPrivate`FrontEndResource["WAStrings", "ShowAllResults"], 
                  StandardForm]]],
               Annotation[#, 
                Dynamic[
                 FEPrivate`FrontEndResource["WAStrings", "ShowAllResults"]], 
                "Tooltip"]& ]}, Dynamic[WolframAlphaClient`Private`show$$],
              ImageSize->All],
             Appearance->None,
             ButtonFunction:>(Quiet[
                WolframAlpha[]]; If[
                Or[
                 CurrentValue["OptionKey"], 
                 CurrentValue["AltKey"]], SelectionMove[
                  ButtonNotebook[], All, ButtonCell, AutoScroll -> False]; 
                NotebookWrite[
                  ButtonNotebook[], 
                  Cell[
                  Typeset`newq$$, "WolframAlphaShort", FormatType -> 
                   "TextForm"], All], Typeset`open$$ = True; 
                WolframAlphaClient`Private`extrudeFromFastParse["Galileo", 
                  Defer[
                   Entity["Person", "GalileoGalilei::rxsr7"]], "Fast parse"]; 
                Typeset`open$$ = False]),
             Evaluator->Automatic,
             Method->"Queued"],
            Alignment->{Right, Top},
            StripOnInput->False]},
          {
           PaneBox[
            TagBox[
             TooltipBox[
              ButtonBox[
               PaneSelectorBox[{False->
                StyleBox[
                 TemplateBox[{"\"Galileo Galilei\"",RowBox[{"Entity", "[", 
                    RowBox[{"\"Person\"", ",", "\"GalileoGalilei::rxsr7\""}], 
                    "]"}],"\"Entity[\\\"Person\\\", \\\"GalileoGalilei::rxsr7\
\\\"]\"","\"person\""},
                  "Entity"],
                 StripOnInput->False,
                 NumberMarks->False], True->
                StyleBox[
                 TemplateBox[{"\"Galileo Galilei\"",RowBox[{"Entity", "[", 
                    RowBox[{"\"Person\"", ",", "\"GalileoGalilei::rxsr7\""}], 
                    "]"}],"\"Entity[\\\"Person\\\", \\\"GalileoGalilei::rxsr7\
\\\"]\"","\"person\""},
                  "Entity"],
                 StripOnInput->False,
                 ShowSyntaxStyles->False,
                 NumberMarks->False,
                 FontColor->RGBColor[1, 0.5, 0]]}, Dynamic[
                 CurrentValue["MouseOver"]],
                BaseStyle->{ShowStringCharacters -> True},
                FrameMargins->0,
                ImageSize->Automatic],
               Alignment->Left,
               Appearance->None,
               BaseStyle->{},
               ButtonFunction:>(SelectionMove[
                  ButtonNotebook[], All, ButtonCell]; NotebookWrite[
                  ButtonNotebook[], 
                  Cell[
                   BoxData[
                    TemplateBox[{"\"Galileo Galilei\"", 
                    RowBox[{"Entity", "[", 
                    RowBox[{"\"Person\"", ",", "\"GalileoGalilei::rxsr7\""}], 
                    "]"}], "\"Entity[\\\"Person\\\", \
\\\"GalileoGalilei::rxsr7\\\"]\"", "\"person\""}, "Entity"]], "Input"], All]; 
                SelectionMove[
                  ButtonNotebook[], After, CellContents]),
               Evaluator->Automatic,
               ImageSize->Automatic,
               Method->"Preemptive"],
              DynamicBox[
               ToBoxes[
                FEPrivate`FrontEndResource["WAStrings", "RemoveResults"], 
                StandardForm]]],
             Annotation[#, 
              Dynamic[
               FEPrivate`FrontEndResource["WAStrings", "RemoveResults"]], 
              "Tooltip"]& ],
            AppearanceElements->{},
            BaseStyle->{ShowStringCharacters -> True, ScriptLevel -> 0},
            ImageSize->{Automatic, {1, 100}},
            Scrollbars->{False, Automatic}], "\[SpanFromLeft]", 
           "\[SpanFromLeft]"}
         },
         AutoDelete->False,
         BaselinePosition->{1, 1},
         FrameStyle->GrayLevel[0.85],
         GridBoxAlignment->{"Columns" -> {{Left}}},
         GridBoxDividers->{
          "Columns" -> {{False}}, "Rows" -> {False, {True}, False}},
         GridBoxItemSize->{
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
        "Grid"],
       Alignment->Top,
       Background->Dynamic[
         FEPrivate`If[
          FEPrivate`And[
           FEPrivate`SameQ[
            FEPrivate`Head[Typeset`newq$$], String], 
           FEPrivate`UnsameQ[Typeset`q$$, Typeset`newq$$]], 
          RGBColor[1., 0.975, 0.95], 
          GrayLevel[1]]],
       BaselinePosition->Baseline,
       FrameStyle->GrayLevel[0.85],
       ImageSize->Automatic,
       RoundingRadius->5,
       StripOnInput->False],
      EventHandlerTag[{
       "MouseEntered" :> 
        FEPrivate`Set[WolframAlphaClient`Private`show$$, True], "MouseExited" :> 
        FEPrivate`Set[WolframAlphaClient`Private`show$$, False], Method -> 
        "Preemptive", PassEventsDown -> Automatic, PassEventsUp -> True}]],
     DynamicModuleValues:>{}], True->
    TagBox[GridBox[{
       {
        DynamicModuleBox[{WolframAlphaClient`Private`show$$ = False, 
         WolframAlphaClient`Private`assumptionsQ$$ = True}, 
         TagBox[
          FrameBox[
           TagBox[GridBox[{
              {
               InputFieldBox[Dynamic[Typeset`newq$$], String,
                Appearance->None,
                BaseStyle->{"CalculateInput"},
                ContinuousAction->True,
                Enabled->True,
                FieldSize->{{1, 40}, {1, 
                   DirectedInfinity[1]}},
                TrapSelection->False], 
               ButtonBox[
                TagBox[
                 TooltipBox[
                  StyleBox["\<\"\[RightGuillemet]\"\>",
                   StripOnInput->False,
                   LineColor->RGBColor[1, 0.5, 0],
                   FrontFaceColor->RGBColor[1, 0.5, 0],
                   BackFaceColor->RGBColor[1, 0.5, 0],
                   GraphicsColor->RGBColor[1, 0.5, 0],
                   FontColor->RGBColor[1, 0.5, 0]],
                  DynamicBox[
                   ToBoxes[
                    FEPrivate`FrontEndResource[
                    "WAStrings", "InterpretationAssumptions"], StandardForm]]],
                 Annotation[#, 
                  Dynamic[
                   FEPrivate`FrontEndResource[
                   "WAStrings", "InterpretationAssumptions"]], "Tooltip"]& ],
                Appearance->None,
                BaselinePosition->Baseline,
                ButtonFunction:>(Quiet[
                   WolframAlpha[]]; Typeset`open$$ = True; 
                 WolframAlphaClient`Private`extrudeFromFastParse["Galileo", 
                   Defer[
                    Entity["Person", "GalileoGalilei::rxsr7"]], "Fast parse"]; 
                 Typeset`open$$ = False),
                ContentPadding->False,
                Evaluator->Automatic,
                Method->"Queued"], 
               ItemBox[
                ButtonBox[
                 PaneSelectorBox[{True->
                  TagBox[
                   TooltipBox[
                    
                    DynamicBox[FEPrivate`FrontEndResource[
                    "WABitmaps", "OrangeSquarePlus"]],
                    DynamicBox[
                    ToBoxes[
                    FEPrivate`FrontEndResource["WAStrings", "ShowAllResults"],
                     StandardForm]]],
                   Annotation[#, 
                    Dynamic[
                    FEPrivate`FrontEndResource[
                    "WAStrings", "ShowAllResults"]], "Tooltip"]& ], False->
                  TagBox[
                   TooltipBox[
                    
                    DynamicBox[FEPrivate`FrontEndResource[
                    "WABitmaps", "GraySquarePlus"]],
                    DynamicBox[
                    ToBoxes[
                    FEPrivate`FrontEndResource["WAStrings", "ShowAllResults"],
                     StandardForm]]],
                   Annotation[#, 
                    Dynamic[
                    FEPrivate`FrontEndResource[
                    "WAStrings", "ShowAllResults"]], "Tooltip"]& ]}, Dynamic[
                  WolframAlphaClient`Private`show$$],
                  ImageSize->All],
                 Appearance->None,
                 ButtonFunction:>(Quiet[
                    WolframAlpha[]]; If[
                    Or[
                    CurrentValue["OptionKey"], 
                    CurrentValue["AltKey"]], SelectionMove[
                    ButtonNotebook[], All, ButtonCell, AutoScroll -> False]; 
                    NotebookWrite[
                    ButtonNotebook[], 
                    Cell[
                    Typeset`newq$$, "WolframAlphaShort", FormatType -> 
                    "TextForm"], All], Typeset`open$$ = True; 
                    WolframAlphaClient`Private`extrudeFromFastParse["Galileo", 
                    Defer[
                    Entity["Person", "GalileoGalilei::rxsr7"]], "Fast parse"]; 
                    Typeset`open$$ = False]),
                 Evaluator->Automatic,
                 Method->"Queued"],
                Alignment->{Right, Top},
                StripOnInput->False]},
              {
               PaneBox[
                TagBox[
                 TooltipBox[
                  ButtonBox[
                   PaneSelectorBox[{False->
                    StyleBox[
                    
                    TemplateBox[{
                    "\"Galileo Galilei\"",RowBox[{"Entity", "[", 
                    RowBox[{"\"Person\"", ",", "\"GalileoGalilei::rxsr7\""}], 
                    "]"}],"\"Entity[\\\"Person\\\", \\\"GalileoGalilei::rxsr7\
\\\"]\"","\"person\""},
                    "Entity"],
                    StripOnInput->False,
                    NumberMarks->False], True->
                    StyleBox[
                    
                    TemplateBox[{
                    "\"Galileo Galilei\"",RowBox[{"Entity", "[", 
                    RowBox[{"\"Person\"", ",", "\"GalileoGalilei::rxsr7\""}], 
                    "]"}],"\"Entity[\\\"Person\\\", \\\"GalileoGalilei::rxsr7\
\\\"]\"","\"person\""},
                    "Entity"],
                    StripOnInput->False,
                    ShowSyntaxStyles->False,
                    NumberMarks->False,
                    FontColor->RGBColor[1, 0.5, 0]]}, Dynamic[
                    CurrentValue["MouseOver"]],
                    BaseStyle->{ShowStringCharacters -> True},
                    FrameMargins->0,
                    ImageSize->Automatic],
                   Alignment->Left,
                   Appearance->None,
                   BaseStyle->{},
                   ButtonFunction:>(SelectionMove[
                    ButtonNotebook[], All, ButtonCell]; NotebookWrite[
                    ButtonNotebook[], 
                    Cell[
                    BoxData[
                    TemplateBox[{"\"Galileo Galilei\"", 
                    RowBox[{"Entity", "[", 
                    RowBox[{"\"Person\"", ",", "\"GalileoGalilei::rxsr7\""}], 
                    "]"}], "\"Entity[\\\"Person\\\", \
\\\"GalileoGalilei::rxsr7\\\"]\"", "\"person\""}, "Entity"]], "Input"], All]; 
                    SelectionMove[
                    ButtonNotebook[], After, CellContents]),
                   Evaluator->Automatic,
                   ImageSize->Automatic,
                   Method->"Preemptive"],
                  DynamicBox[
                   ToBoxes[
                    FEPrivate`FrontEndResource["WAStrings", "RemoveResults"], 
                    StandardForm]]],
                 Annotation[#, 
                  Dynamic[
                   FEPrivate`FrontEndResource["WAStrings", "RemoveResults"]], 
                  "Tooltip"]& ],
                AppearanceElements->{},
                BaseStyle->{ShowStringCharacters -> True, ScriptLevel -> 0},
                ImageSize->{Automatic, {1, 100}},
                Scrollbars->{False, Automatic}], "\[SpanFromLeft]", 
               "\[SpanFromLeft]"}
             },
             AutoDelete->False,
             BaselinePosition->{1, 1},
             FrameStyle->GrayLevel[0.85],
             GridBoxAlignment->{"Columns" -> {{Left}}},
             
             GridBoxDividers->{
              "Columns" -> {{False}}, "Rows" -> {False, {True}, False}},
             
             GridBoxItemSize->{
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
            "Grid"],
           Alignment->Top,
           Background->Dynamic[
             FEPrivate`If[
              FEPrivate`And[
               FEPrivate`SameQ[
                FEPrivate`Head[Typeset`newq$$], String], 
               FEPrivate`UnsameQ[Typeset`q$$, Typeset`newq$$]], 
              RGBColor[1., 0.975, 0.95], 
              GrayLevel[1]]],
           BaselinePosition->Baseline,
           FrameStyle->GrayLevel[0.85],
           ImageSize->Automatic,
           RoundingRadius->5,
           StripOnInput->False],
          
          EventHandlerTag[{
           "MouseEntered" :> 
            FEPrivate`Set[WolframAlphaClient`Private`show$$, True], 
            "MouseExited" :> 
            FEPrivate`Set[WolframAlphaClient`Private`show$$, False], Method -> 
            "Preemptive", PassEventsDown -> Automatic, PassEventsUp -> True}]],
         DynamicModuleValues:>{}]},
       {
        InterpretationBox[
         StyleBox[
          
          DynamicBox[FEPrivate`FrontEndResource[
           "FEExpressions", "NecklaceAnimator"][20]],
          AnimatorBoxOptions->{ImageSize->20}],
         Animator[Appearance -> "Necklace", ImageSize -> 20],
         BaseStyle->{"Deploy"}]}
      },
      BaselinePosition->{1, 1},
      DefaultBaseStyle->"Column",
      GridBoxAlignment->{"Columns" -> {{Left}}},
      GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
     
     "Column"]}, Dynamic[
     TrueQ[Typeset`open$$]],
    BaseStyle->{Deployed -> True},
    ImageSize->Automatic],
   DynamicModuleValues:>{}],
  BaseStyle->{Deployed -> True},
  DeleteWithContents->True,
  Editable->False,
  SelectWithContents->True]], "WolframAlphaShortInput",ExpressionUUID->\
"dc76cb56-ea6c-4e88-9862-ea97ea16d9f4"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  TemplateBox[{"\"Galileo Galilei\"",RowBox[{"Entity", "[", 
      RowBox[{"\"Person\"", ",", "\"GalileoGalilei::rxsr7\""}], "]"}],
    "\"Entity[\\\"Person\\\", \\\"GalileoGalilei::rxsr7\\\"]\"","\"person\""},
   
   "Entity"], "[", "\"\<Properties\>\"", "]"}]], "Input",
 CellChangeTimes->{{3.706918845686123*^9, 
  3.706918849158389*^9}},ExpressionUUID->"02ae2744-ac7f-4307-9f2a-\
5d6a18ae7a4d"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   TemplateBox[{"\"other names\"",RowBox[{"EntityProperty", "[", 
       RowBox[{"\"Person\"", ",", "\"AlternateNames\""}], "]"}],
     "\"EntityProperty[\\\"Person\\\", \\\"AlternateNames\\\"]\""},
    "EntityProperty"], ",", 
   TemplateBox[{"\"astrological sign\"",RowBox[{"EntityProperty", "[", 
       RowBox[{"\"Person\"", ",", "\"AstrologicalSign\""}], "]"}],
     "\"EntityProperty[\\\"Person\\\", \\\"AstrologicalSign\\\"]\""},
    "EntityProperty"], ",", 
   TemplateBox[{"\"date of birth\"",RowBox[{"EntityProperty", "[", 
       RowBox[{"\"Person\"", ",", "\"BirthDate\""}], "]"}],
     "\"EntityProperty[\\\"Person\\\", \\\"BirthDate\\\"]\""},
    "EntityProperty"], ",", 
   TemplateBox[{"\"place of birth\"",RowBox[{"EntityProperty", "[", 
       RowBox[{"\"Person\"", ",", "\"BirthPlace\""}], "]"}],
     "\"EntityProperty[\\\"Person\\\", \\\"BirthPlace\\\"]\""},
    "EntityProperty"], ",", 
   TemplateBox[{"\"brothers\"",RowBox[{"EntityProperty", "[", 
       RowBox[{"\"Person\"", ",", "\"Brothers\""}], "]"}],
     "\"EntityProperty[\\\"Person\\\", \\\"Brothers\\\"]\""},
    "EntityProperty"], ",", 
   TemplateBox[{"\"children\"",RowBox[{"EntityProperty", "[", 
       RowBox[{"\"Person\"", ",", "\"Children\""}], "]"}],
     "\"EntityProperty[\\\"Person\\\", \\\"Children\\\"]\""},
    "EntityProperty"], ",", 
   TemplateBox[{"\"Chinese zodiac sign\"",RowBox[{"EntityProperty", "[", 
       RowBox[{"\"Person\"", ",", "\"ChineseZodiacSign\""}], "]"}],
     "\"EntityProperty[\\\"Person\\\", \\\"ChineseZodiacSign\\\"]\""},
    "EntityProperty"], ",", 
   TemplateBox[{"\"daughters\"",RowBox[{"EntityProperty", "[", 
       RowBox[{"\"Person\"", ",", "\"Daughters\""}], "]"}],
     "\"EntityProperty[\\\"Person\\\", \\\"Daughters\\\"]\""},
    "EntityProperty"], ",", 
   TemplateBox[{"\"date of death\"",RowBox[{"EntityProperty", "[", 
       RowBox[{"\"Person\"", ",", "\"DeathDate\""}], "]"}],
     "\"EntityProperty[\\\"Person\\\", \\\"DeathDate\\\"]\""},
    "EntityProperty"], ",", 
   TemplateBox[{"\"place of death\"",RowBox[{"EntityProperty", "[", 
       RowBox[{"\"Person\"", ",", "\"DeathPlace\""}], "]"}],
     "\"EntityProperty[\\\"Person\\\", \\\"DeathPlace\\\"]\""},
    "EntityProperty"], ",", 
   TemplateBox[{"\"father\"",RowBox[{"EntityProperty", "[", 
       RowBox[{"\"Person\"", ",", "\"Father\""}], "]"}],
     "\"EntityProperty[\\\"Person\\\", \\\"Father\\\"]\""},
    "EntityProperty"], ",", 
   TemplateBox[{"\"full name\"",RowBox[{"EntityProperty", "[", 
       RowBox[{"\"Person\"", ",", "\"FullName\""}], "]"}],
     "\"EntityProperty[\\\"Person\\\", \\\"FullName\\\"]\""},
    "EntityProperty"], ",", 
   TemplateBox[{"\"gender\"",RowBox[{"EntityProperty", "[", 
       RowBox[{"\"Person\"", ",", "\"Gender\""}], "]"}],
     "\"EntityProperty[\\\"Person\\\", \\\"Gender\\\"]\""},
    "EntityProperty"], ",", 
   TemplateBox[{"\"height\"",RowBox[{"EntityProperty", "[", 
       RowBox[{"\"Person\"", ",", "\"Height\""}], "]"}],
     "\"EntityProperty[\\\"Person\\\", \\\"Height\\\"]\""},
    "EntityProperty"], ",", 
   TemplateBox[{"\"husbands\"",RowBox[{"EntityProperty", "[", 
       RowBox[{"\"Person\"", ",", "\"Husbands\""}], "]"}],
     "\"EntityProperty[\\\"Person\\\", \\\"Husbands\\\"]\""},
    "EntityProperty"], ",", 
   TemplateBox[{"\"image\"",RowBox[{"EntityProperty", "[", 
       RowBox[{"\"Person\"", ",", "\"Image\""}], "]"}],
     "\"EntityProperty[\\\"Person\\\", \\\"Image\\\"]\""},
    "EntityProperty"], ",", 
   TemplateBox[{"\"space missions\"",RowBox[{"EntityProperty", "[", 
       RowBox[{"\"Person\"", ",", "\"MannedSpaceMissions\""}], "]"}],
     "\"EntityProperty[\\\"Person\\\", \\\"MannedSpaceMissions\\\"]\""},
    "EntityProperty"], ",", 
   TemplateBox[{
    "\"mathematical contributions\"",RowBox[{"EntityProperty", "[", 
       RowBox[{"\"Person\"", ",", "\"MathematicalAchievements\""}], "]"}],
     "\"EntityProperty[\\\"Person\\\", \\\"MathematicalAchievements\\\"]\""},
    "EntityProperty"], ",", 
   TemplateBox[{"\"mother\"",RowBox[{"EntityProperty", "[", 
       RowBox[{"\"Person\"", ",", "\"Mother\""}], "]"}],
     "\"EntityProperty[\\\"Person\\\", \\\"Mother\\\"]\""},
    "EntityProperty"], ",", 
   TemplateBox[{
    "\"notable film appearances\"",RowBox[{"EntityProperty", "[", 
       RowBox[{"\"Person\"", ",", "\"MovieAppearances\""}], "]"}],
     "\"EntityProperty[\\\"Person\\\", \\\"MovieAppearances\\\"]\""},
    "EntityProperty"], ",", 
   TemplateBox[{
    "\"notable film direction credits\"",RowBox[{"EntityProperty", "[", 
       RowBox[{"\"Person\"", ",", "\"MoviesDirected\""}], "]"}],
     "\"EntityProperty[\\\"Person\\\", \\\"MoviesDirected\\\"]\""},
    "EntityProperty"], ",", 
   TemplateBox[{
    "\"notable film production credits\"",RowBox[{"EntityProperty", "[", 
       RowBox[{"\"Person\"", ",", "\"MoviesProduced\""}], "]"}],
     "\"EntityProperty[\\\"Person\\\", \\\"MoviesProduced\\\"]\""},
    "EntityProperty"], ",", 
   TemplateBox[{
    "\"notable film writing credits\"",RowBox[{"EntityProperty", "[", 
       RowBox[{"\"Person\"", ",", "\"MoviesWritten\""}], "]"}],
     "\"EntityProperty[\\\"Person\\\", \\\"MoviesWritten\\\"]\""},
    "EntityProperty"], ",", 
   TemplateBox[{"\"name\"",RowBox[{"EntityProperty", "[", 
       RowBox[{"\"Person\"", ",", "\"Name\""}], "]"}],
     "\"EntityProperty[\\\"Person\\\", \\\"Name\\\"]\""},
    "EntityProperty"], ",", 
   TemplateBox[{"\"nationality\"",RowBox[{"EntityProperty", "[", 
       RowBox[{"\"Person\"", ",", "\"NationalityCountries\""}], "]"}],
     "\"EntityProperty[\\\"Person\\\", \\\"NationalityCountries\\\"]\""},
    "EntityProperty"], ",", 
   TemplateBox[{"\"net worth\"",RowBox[{"EntityProperty", "[", 
       RowBox[{"\"Person\"", ",", "\"NetWorth\""}], "]"}],
     "\"EntityProperty[\\\"Person\\\", \\\"NetWorth\\\"]\""},
    "EntityProperty"], ",", 
   TemplateBox[{"\"notable artworks\"",RowBox[{"EntityProperty", "[", 
       RowBox[{"\"Person\"", ",", "\"NotableArtworks\""}], "]"}],
     "\"EntityProperty[\\\"Person\\\", \\\"NotableArtworks\\\"]\""},
    "EntityProperty"], ",", 
   TemplateBox[{
    "\"astronomical discoveries\"",RowBox[{"EntityProperty", "[", 
       RowBox[{"\"Person\"", ",", "\"NotableAstronomicalDiscoveries\""}], 
       "]"}],"\"EntityProperty[\\\"Person\\\", \
\\\"NotableAstronomicalDiscoveries\\\"]\""},
    "EntityProperty"], ",", 
   TemplateBox[{"\"notable books\"",RowBox[{"EntityProperty", "[", 
       RowBox[{"\"Person\"", ",", "\"NotableBooks\""}], "]"}],
     "\"EntityProperty[\\\"Person\\\", \\\"NotableBooks\\\"]\""},
    "EntityProperty"], ",", 
   TemplateBox[{"\"famous chemistry problems\"",RowBox[{"EntityProperty", "[", 
       RowBox[{"\"Person\"", ",", "\"NotableChemistryProblems\""}], "]"}],
     "\"EntityProperty[\\\"Person\\\", \\\"NotableChemistryProblems\\\"]\""},
    "EntityProperty"], ",", 
   TemplateBox[{"\"notable facts\"",RowBox[{"EntityProperty", "[", 
       RowBox[{"\"Person\"", ",", "\"NotableFacts\""}], "]"}],
     "\"EntityProperty[\\\"Person\\\", \\\"NotableFacts\\\"]\""},
    "EntityProperty"], ",", 
   TemplateBox[{"\"notable inventions\"",RowBox[{"EntityProperty", "[", 
       RowBox[{"\"Person\"", ",", "\"NotableInventions\""}], "]"}],
     "\"EntityProperty[\\\"Person\\\", \\\"NotableInventions\\\"]\""},
    "EntityProperty"], ",", 
   TemplateBox[{"\"physics contributions\"",RowBox[{"EntityProperty", "[", 
       RowBox[{"\"Person\"", ",", "\"NotablePhysicsProblems\""}], "]"}],
     "\"EntityProperty[\\\"Person\\\", \\\"NotablePhysicsProblems\\\"]\""},
    "EntityProperty"], ",", 
   TemplateBox[{"\"occupation\"",RowBox[{"EntityProperty", "[", 
       RowBox[{"\"Person\"", ",", "\"Occupation\""}], "]"}],
     "\"EntityProperty[\\\"Person\\\", \\\"Occupation\\\"]\""},
    "EntityProperty"], ",", 
   TemplateBox[{"\"parents\"",RowBox[{"EntityProperty", "[", 
       RowBox[{"\"Person\"", ",", "\"Parents\""}], "]"}],
     "\"EntityProperty[\\\"Person\\\", \\\"Parents\\\"]\""},
    "EntityProperty"], ",", 
   TemplateBox[{"\"siblings\"",RowBox[{"EntityProperty", "[", 
       RowBox[{"\"Person\"", ",", "\"Siblings\""}], "]"}],
     "\"EntityProperty[\\\"Person\\\", \\\"Siblings\\\"]\""},
    "EntityProperty"], ",", 
   TemplateBox[{"\"sisters\"",RowBox[{"EntityProperty", "[", 
       RowBox[{"\"Person\"", ",", "\"Sisters\""}], "]"}],
     "\"EntityProperty[\\\"Person\\\", \\\"Sisters\\\"]\""},
    "EntityProperty"], ",", 
   TemplateBox[{"\"sons\"",RowBox[{"EntityProperty", "[", 
       RowBox[{"\"Person\"", ",", "\"Sons\""}], "]"}],
     "\"EntityProperty[\\\"Person\\\", \\\"Sons\\\"]\""},
    "EntityProperty"], ",", 
   TemplateBox[{"\"spouses\"",RowBox[{"EntityProperty", "[", 
       RowBox[{"\"Person\"", ",", "\"Spouses\""}], "]"}],
     "\"EntityProperty[\\\"Person\\\", \\\"Spouses\\\"]\""},
    "EntityProperty"], ",", 
   TemplateBox[{"\"weight\"",RowBox[{"EntityProperty", "[", 
       RowBox[{"\"Person\"", ",", "\"Weight\""}], "]"}],
     "\"EntityProperty[\\\"Person\\\", \\\"Weight\\\"]\""},
    "EntityProperty"], ",", 
   TemplateBox[{"\"wives\"",RowBox[{"EntityProperty", "[", 
       RowBox[{"\"Person\"", ",", "\"Wives\""}], "]"}],
     "\"EntityProperty[\\\"Person\\\", \\\"Wives\\\"]\""},
    "EntityProperty"]}], "}"}]], "Output",
 CellChangeTimes->{
  3.706918849875781*^9},ExpressionUUID->"5507c063-58a5-4b9e-99e3-\
d8e1305dc8cb"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  TemplateBox[{"\"Galileo Galilei\"",RowBox[{"Entity", "[", 
      RowBox[{"\"Person\"", ",", "\"GalileoGalilei::rxsr7\""}], "]"}],
    "\"Entity[\\\"Person\\\", \\\"GalileoGalilei::rxsr7\\\"]\"","\"person\""},
   
   "Entity"], "[", "\"\<Image\>\"", "]"}]], "Input",
 CellChangeTimes->{{3.706918845686123*^9, 3.706918849158389*^9}, {
  3.7069188919688377`*^9, 
  3.706918898919281*^9}},ExpressionUUID->"8983ffc9-b14c-43d8-9f8d-\
2d093887724d"],

Cell[BoxData[
 GraphicsBox[
  TagBox[RasterBox[CompressedData["
1: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
SQuHJI6tsg3I0VdFC6rjZI0ZptYCV0uhJ8rEUEuxMgVJKCPg6B+yJdiM4l3U
hdKDWJEUEEb0D8F3gyPaGaJIwaK+RhGda6AeAU8KHUNjYNkcCp9PF4lYaEvv
shuSwZ9JcT6eDAkD5neAiWdhcAxAigWY3mM4hhKGLNPRw8MYfqGUbjIRTcPA
97BrR/Uurk7XVtuJq+ocF2bk3d7Q8+qOqnu7a94fan1/ctCd463Pjo0Cnn9d
nwk831ycBjz/uLXgjzsL391a+OrGDy9v/vj+/vI/H6/5/eGqt/eWv7u/6q8H
q/8CvLcWvrs+D0mhVya9Pjf67bkRb860Pz3S68H++ge/1t3eVXVpY9G5dXnn
1+fvmpu5fLRn9dep3w1JGl1paU6V9ckyDyqKakg3FkZLS9MMaVESi44mlRNp
7KAIche0BoHZSN5Fng8rS0T/YFzXIGwXQIrSC/O6FO1FOy+bgD+JlDBkV5eJ
43CpKE+5t8SjPCNTEjR2M/DkKvnQzFMFJAQmMwJ4ov4EYT76E8monKBwYleV
iAo8K1Lcw5pyc5yslij61gEJV78tvrW+8uqW0ns7q14faH55tN/Ng433Dwx+
e3b8/16d/vbCNy/OTn59aebvN+e/v/X9/95f+vb2j29vLfnz0aq/nq7789Hq
Px6u+uvJ2r8eLP/r/tI/bn4PeRUy55uL41+eGvriRPu7M+3PDvdCatzumru/
1N7YWnl5A9KFHllcvHSEc9W4lB+GpQzK15Q4GT0TFPVpphE16dA1WUThan4I
k/wFldKVSPMn0INQnhDXBG+7Ag4EbqEEPx/Pzst3KEO04qNIfTwZUN//C0+t
w4L4UwG5lebjiaVjUJ4YcgTADCeFRECfRg0FfyLNEiXMKWbU5cT3Losr9rBG
ZckOft3jyoKiqysKr28qfrC76uWhlrcn256c7P/k2Ki35yf+eWXa70hxmfn7
9Xngz7c3FgDPNzcQi/5xb/lfj1b/eX/FH/dW/O+DVX/e//HPuz+8uz735cUp
by5MfHNmzPNj7S9+6//qWP+nB3o92NNwf3fj3V/qb2ytubiu/NzqkvNr6jZO
Tl39dfefOnIG5GmLXew0HS1FR+9XFFcQp4LxzaWDeMezWUFkWkAEvgvaxqNj
JjLueXkCTLAoUIWjz5/o4PmJP9F+6f/D02aGegQ8wZ80IRmNdzwTh6XjsBQM
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
aGGHxCtZqVp+opKdYRImqOnxWoZbTVHyQoEnkRoIHyqIGIQuvqGrx5/wRJF2
5hn2ce0OLUaIvDyRe92p4cATnTcBKVrfP+HZOd6hX0Jh4sgYLDnMW5KQ+xVx
5K8o9EAZj2wVsCNlAr2IpOAFpKrDFjfFnZ1fdeHn2oNr8q5uq3i5txE8eWlv
1atDTS8PNr/Y3wy9E+TDOzsaH+7pd2t7b6/63NvV79G+gY/2td35peX61vrr
EOMrigHp4801b37t82Rv78sbq06sLjm+ruL0pobfVtfsXVy2f0n18RW9zq5p
O7CgbtGAuME1KaWJ2lQzx8aJgOKebhDFy5kpWk6qjh2tJJkE4cCTzwmDyR1D
D/P3bqaj/vy/eX4S7+HeZhWZT73xjnwRA1IoiwT5E0UKPMGfsVFOyJ8qs6Fz
Pw/zkbckIfEOJQkp8ciwicyboAhCONCmckMFglAZL0TG8texv6r00Ja3xW0Z
m7hidPT68d1/+bpgd0fh7nk9V8wr2TUr4+a6QQ/Wjru7aOS1Ob1frW17tLL2
2YbGl9sH3FrV6+bqXs93tj3d2fxid9P7g/1vrq08MrNw06iEhf1MW6dlHF5Z
c3Rjr2Pb+m1cVLFqbumiSXnfj81dMr54TnvGqJ6OftmKUjeph1NSkWDOtkg8
HHyuXpyjE6VKmclyRpSY5BAT7Cq6XICjkpBtIyI0frgQf/AbJSCUGhBK6RZB
6RpO+gJD/IJA7haB+wKD/QoDGLFdgjBfBpO6hFC6+eE+D+3UVsER2SH1fmsA
8ifwZHtbUPQuO6tJDf50xEYBT4lW4Vtf+o88vS1oMNLP48NgjiAw/HicIAEj
wCDBJZnofVKl82osi3qbf56Yun58xrr27hsHZf7YntSnUjK6VjyxwTS/V+LS
3t1/ao47P6f88YqaB8vK7i+tfLq69cainpcXVdxdU39rXe3pRSXbJib/Nrb4
4NjCfeMKjs2rObm46bclzXsXNSydkDOzPWnaoJQRtZ66DHmmjRSrCo1Whzql
/rEqRoZZlK4XxgupmSpegUEKSIGnW4A3ccOtMqJKhGfRg2mUECIxyHtjWEgE
DO9hn9PCv+RiuwjwXXm4LnTcVxRit9CIz/3C/xWI/TII91U4risW1wWH+QpN
nj6e6PoSWo/+I89/+hPdfEfyp5cnuh6Czu8gEhUHaZlC9+fQ/cSMwJxE04im
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
ani6rfXGgbpLvzQ+ODDy8YGvHx8cvee7nKvber/4bfLLAwt2TOg3NT9hea/s
pU1Rv3Sk3lvbdOCblF2Tsp/tGPFy75g3B0a/3j/86e4Bdzc2P9jU+uqXwW93
j3q3p+PRpsGXf+q1bFDkwjbn1DrVlBL9qB7y9lQF9PmZclqimJmkljglfCWL
DFmRTQ7l0oI1YpJBTNLyIswiglKDZbO+ZGI/k+A+S5BTk+UMLTHIJqKTI7qF
hHUJJgQFEgIDMX7h0NiHd6VE+PvuB/Oth0Cz1JknusUJJQnyJ/CMjI3RmYwK
rRL8yREx0HgHAU/wp299Hq1HkAekhK4cVgBXGGpkYyuMmvYeyXlORYWTv7w+
/syUgourio+uz7z4c+69teXXNzVd2D/o5oH2N2e+fn105PNfB97aWHd0YfaD
PW33drefW9Nry9fZawd3X9OWtrJv8t7JlaeX9D+9vP/hb3NPLS68t732zW+t
f5wZ+NelEe/Oj3p9fsKr85OfnRl3Y0/btc1Ne6YmL66XL61UfZcjmFYTMzrf
3BAtzdbSU+QwfgqipAKrgG2VcB1KEY8UzCL685EF8DCtlGBSUQ08iigiQBLm
ryeGxQlZbi7VyiepeLgIzOeBhM/9yF/5U7pApCM3K0Z0xYZ1CyL5ISJ0A6F3
iyFLdpQQBgPDouNAfBZFwmcqBFyjUhbrtEfFxerNJqVOJVYIuWImW0j1xXvn
+Qjd3wSeEpwfjdqNyuymoAYW66Tt2UlF0epKt3BpfcKFGRXX1lUf+zn77KoM
4HljY/25vf2Qb3Mc/frFgVG31jed+D7/5obGp78OPbe68dzKPnu+Kds7vnzv
mDIoWKv7p27pKLy0asi9Db2vrqh++kvL018bnx/pfXNn7d39fa/t6ndn/9Cr
2/tc2dR8Y2Pj5Z+q941P3TcqdUNv9w/9MseXuhtjZLk6NvCMEbOBZ6RCrOfR
dQK6mksS0YIF1ACnhglyaJDbVlWUMFFIlwQZL9eqdfFpViGNC818xL8C8F/4
E7/0I3VFeWIw3XAR/ihJELKn7I16ZIvT+8VDGg3DpGF5bIpYwJQJuXqVLMpp
/SdPgAklnszE+3hC74TuHwFSKQnqWjBHFOpUkmqiNIPy4/KjFSUO/rQc2/FJ
5dfXNZ7fUnpmReb9NSUXVpQeWld1dWP7q4MTz/1Yu2t82t7JqTdWN1xb13Jj
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
YySlAcLSIM94BTfWnZ2pUyR5iGJknEgRLU7BKgxUxcqpsQpKhp6f7StK0/IS
PNkpXsJ8o9qDB7o1oOPzAYFsjybbIkk2RKYzg+1KIdrS8DY01FGi2wc4xG8w
6A8w+KNY0nEk9rgb9LvnUVf0B86YD1ywHyLwEEw03hbAxOIdCARnBg0FeKok
HJgnyEc/42mNn7+8v45JsWeRHbhEFw2P5kHFgnya5c0ZyvBeKPe72hz8eCT+
RkfIhRLN6VzlQqnv3ZGcOyslr7brXmxUvrpc++5Gx+OrLecmczoaIzUKhFqM
kNPsVVT7GC9GToQsN1Zemadfqkl8OtewO164eTLrzW7Hg+WqnfHMyx2Ru80h
j7pNd5oD7naEXCz3Gc3wzjfw0r3FMXJuhJiRpBbHK/hGJt4kpmfoJFVRBnOo
KjdAmhvknuYnjPfmhauYWg5ahLEluNoQkbZUvBOT7sbhonlcpFSM81Yx9Aqq
r5LuK6eq+RghzZmOP451O+LidASD/giLOYrDHsNgj6GwRyFB44wdwxDsQGMH
SCGeVAyfQ1ZIeAYvpdWfHCEL8ATtncLCHf796PD9n0DgPLJILjwiUskkqeiY
eDWnPFQwUajbH0t5NJnxcDRtrTpwMttjyqzZ7I1+c7Hy3pWKl9cb3t1q++R6
y/2Vsr3zZRcm8yf60qvzjSY9K1JFTdKwGpMMsy2pK2OFZwbSnpxtfHd18PZC
1e2L1c+ut99aqXy4Wnd5IP5smXa3xXijOeDpSMJuW/S5qqjqcM8CP2WchwjU
nCYJGwjwBF4FPDP1wooobV6wPMVPEO/LN6ooGgFWRHfhEOzxrg5UjAsZ40jC
AGM4cciOPLKdO8PJneao5SONMrK/O9lHStZJiCoBTspyo2GPQ77F25CwR/EY
wPZDFPojN/SH0NAEJGeAFHTk6XQsl0uVS3k6L8Wv8rSM3wv13w+68NDNySj4
fm8y0ZGBd+WTMO4MYrAHL9WXVxcjutga8mg26+npvN2OuLPmgKlCn3NN4fsz
2a8vVz683rg+l7FzNuflVtPmZPZcd8KpruSTnZntZbGFkV7ASD3poYuNOZd6
856tdDxabXm02Px6u+/uat3N1epbGzW7i2UPNxovj6Weq/e/1BKw3RZwfyTu
1lDqSmNiX0pQXYR/sk4eqxJGy7jhQkakiJHkIQCZPUMnqE/0K43RxvvyEoMk
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
WadaYtdGCk7VJZSFyaoi1aAHVBumqovWtKUHXhyu6i6L6SyNTg0EjVEY50HI
9GHVJ+nNJnVKsDxQy8ehj1KoLkyis4SBktMRGqZznIZSES0dLvPfOJG2N597
e6Xg5sWsu+v5jzbNt5ez9uZTbpxJ3j2fsrOQdGXadGUyYv9s/M35xDM9hrpc
+syYaW2puKhA5WfA+GqJITp2boxfYoCHPgT6/d3Cky9gMzh0CoNOptJJWGiU
aTSWgaJxsVDdy3AUU2zkNFtv1pHKZNniYObT9fYXl1q3x3OmawIvdsddO5Fz
Z7b89lzlUnfqRI1ppjmlpyi0MFxSFOJZEaltiNU1xqoHMw0n83wHUhRd0fzJ
HK/BVGVHnHu9SVYeKss3yszhXuZw77oYQ66PGBSQqV5ck4xYECwpDpeNVkef
7cq40J89Xh11uin5XFduWYQyL0CarGaX6IWl/tKaWO/locqeirjOiujabN/y
RHW6HytWiS0KlVUm6JKD3EMNQgEXRaE68QhOMqoLKIpMCmJ5lGSu0XT3XOk3
97o/uVX/6lbV4+vmF7fKX9+qena16PV22bvdqgc3qvavmu9dLbl/2bxyMnqy
3XdhPGbnUsXQYIx/EJrEPMLi20kkGDEbp2RTAhVSfYg/NN6aXCIQ8bkcBpNB
oTPIFDqBSId6nTQWksNDcpn2YrpNgAydESjYOW1+vd3zbKPl5Wbbu72+m7Pm
2abQtYGk3Ym8vVPmveny+ZakYXPwaFlUZ7ax3KSoCHPvzvTvz/WfKAtZ607a
G8/ZGUnZHIhd6zEtNAVtn8iabTSNV4W1ZOgb030aM/w7U4Ja4v3yDKI4KSnO
nVgQIMwz8kEum6iO3Rgr6c43ducHnW7MaEj2TdcL0vWiPA9OtprTkuR3vq+0
uyK6qzp2oCGhOkOXZKDFqvAxSkJVok+eycsgpwrYCCrF3p3opCQ7xHjQigIF
PVle1yay3+02vbvd8NmDhic3S25t5z64Vvh4x/xks+jtdvnbq+U7m0Uby5k3
Nst3V4uXpjN2VqoW54pTk4QKlZNCg6Zx7EFf1V3KUEl4/ipVhM5HH+Kr0KkE
ShFPymPyGFQWhcIkUeg4aIBxOoLHQUi4TkqOncmbNFoX++zK0K3z5XcWK/fP
lT3daHi13XbrfOnqcMpMS9iNMyV3zlWDanyxK3XUHHKyzNQLeIbKeuLdZ4r9
Z0v8dvpTn58re71c8fHFsjfrVbdnMjeGox+eN9+YzlntTbgyknG+NW65M6k/
NbgjztfsIyrQ8Yv8xPkGgdkoLguRTlTErvTmNyZ7tWX4tqb5t6YH5wfKkzTc
HCW7UCeui9GP1aQN16eOtKa3loXnx8hjtKRUH7aGfKwiXt9dlhSq5Uh5aCEf
pcDZhEkJhUGSxgTFcnvMJxv1n+7UvLpW8cnDhnvXC7cvpe9dybt31fx0q/z1
VuWjxYKrF9Mf3azeXS+6dbX+85fTZyYKfL0xfNZRkdBFwEPIpES5hOEh5Wpl
Ep1UGqzWegdqJV4yqdadKmIQeRRQbtJ4ZGiiCgZCykUp2c4GkXNJnHJnrubJ
RvfefM3mdPb9tZrbyxX7i2WvrnU8vdK0Ppl1pid6Yzzr3oXaB+frL/Vnna6O
OlEY2JuuH8oKWDb73myL3+uMe3gy5/Hpwnfr9U/Olzw4Z947nXVjJvvZxYpn
ixW3pnKezJm3ehKWG0IHkv0aw5QdMTqgSn9Zia8QRMiuZJ/JspjVnsKxEtNM
XTLg2VsQ2ZRijJZT8tTCHK2oLFxTmeTTkBtckxeUE6ssTFCnBgqj1DQP0jED
xzUnQh1lEOpkZBkPGch1AzDrY1XnWuI/2Wj+aq/1y/2mVzeqHl0rvblVeP1K
4fZa3v5Gyd5iwYOV0o83ap7tFd24lHnnavGXr8ZPDiZLBR8KWTZyAVIhxOnc
6R48opSO0QoYBgnXx10UodfqQ7RijZjjwSdL6UQxFdS4VAGBznDj0ZzE5KP+
QpfewqC3W0Nbk0U3zpbvL5TfXqm8s1p1c6ns2XbLZ3eHPr8/srdYvnk678p0
/v5CJbDoal8a+KpD2bqxHMN8lel6veleT+rT8cKXs5Uvz9U/XWy4c7b6+lz5
+kT+5ZP5e6eLb5wqvDmR9+xM2b0TOdudMXPmmL54fW+cvsOkaQhWVvqKawKl
LdGapeasSz0F46WRwKijZdEjJTEt6UbQ90+Sswv9VclevMJIdXtxdHqEoihJ
nxgkDvGkGmVEAfq3SqojKL/TwzxBx1zBdMzyZtTFKAdyDbsnc7+63vXlXuu7
/cZXN+te3Gq8tV1xbb3kynLRzpL55sXS+2tVdxdLb67G3b+a/eJe/d5Wjd7b
kUo64i52A06Ts7BqDkHHp/gKad48soZP8lcJYgK9DKHeEi8RU8GhujNJEhqR
T+BIKVwWwpOH8KR+1J0b8Gaj7/5C7eZY5p3zFbcvVLzc7XxwufHeev2ndwbf
3h389P7w2umcub7YKzMFewtl26fyl7vjL3bEzlQGzVeH7vRlfDpddncg885w
zq2xoofzjdemq3bPNF45Xbs8Xro1V3v9TN3uZMnuWO7+WO7DifxrPfFzheGn
88JOZBpr/EXVfqL6QFlTmLIuRHapI/dEYeiYOWSqMgbE0hNVsaAzle7HTdGJ
EzT8LKMc8KzNCMqN1hQlGfITDEFqZpg3X0yylxDtNSxEcZzB5EEzeVLLQvjN
CfJTVSGPFiu/vtX1xa32bx73fP20/+Xttsc3Wu9tt9zcqNtZLLu32fhkq/n2
Svntrcyb2zmvX/Z1dYdwRL8F2YfFcRVwcQIaRkrBaLkUHxHdk0tQiyhGvSQS
NPggjbvOnaPkMuRsqphG4eOFEqKYixDgf1ObrP10a+jj1XYQ3NYGk/fnS28u
lAKYj640P91ue3Gj+9m1rufXuxdGkkebg1cmMh+sNWyfzt8YSZtvDl/uMK13
xjw5U/rZQvn+YMr+SPb+RNH9+fqrJ0s3JsvPDxbM9+WChcvjReuDmTujWTv9
yXfG0lbrjUs18WdKImaKwvsTdcCoTSGKzhivGXP0Qm1SW4LnmDlorjH+bFvy
mbbUuY6MhkxdS0FsqIqW6CvKDJEXRnv1VCQWxhty4wzhvtLYMLWcixZRHSO0
7KxAaQjfLdeXVxfBHynw3j2Z8/V+9zcPet7eav3sfufzGy0f73e/uT34dLf7
4XbHncuNT/fa72zV3dgo39zOe/qqd32nTmNEE3hH6RIUmuJEY+LoFLSAjpOw
CBIWTi4ge6tFvn5Kbx+5V6CXwqDiKvhsKXR/HZdLFLHRMrpjuCfh3nLnqyt9
l0czAKKr41nAn083mh5uNL641vlmv+/5bsfj7fabKzXnRlPmh5NuLFU+22rb
mi3Ymc69ejLj1mz+/qmcRwvmBxPp96cyHs3k357M3h3L2h7P2xovWOxNOVFu
vNiXvNaXtN4TtzuYcLUn8t6JpCvtgfPlEWdKw04Xhgwk6QcSfdojPfsSDedr
koaz/fsz9WMlgacaTCtD2RcGMk+1xU13JI33lJRmBMT5CbLDlJWJvq0F0Xkx
+qQwdbhREWyU85iuIGamh6mSdex4GbrKKOhPk690Rb++3Pjdw4G3d9o+vtP6
2eO+F/sdn9wb+vzeiUcb7ffXmx9utz680bR7ufD6TvHdN2OX7/WEpgnQ7CMI
+nE0C4GiIshsApmG5vFIXDaOzcEplTwvnWXyXI3cK0gv16n4Mj6oPiV8poxD
FpGcDAJ0T2nEo/Wea2crtqcL1sczHl9quHG29M6FKpCDPrvT/82j8S8fjj3b
aV+ZygYwweOTrbaHm03XzxeDVPXJtfZXm/VAj5ZK1rrDbp3K3J/K2OiNXWqP
vAHKqpO5ILHOVQet9ySstEautUVs9cdc6Y641m9aaTScqQhfboyfLQnvTfQa
TPGZMZtOFUWcLjOdroicqTEttMUtDaRdOpm3Npl/fizzwomsrvbM3rasvDiv
tEBJdZJveoDE5MWNDVRlpoX5+buTKHZSASpEQ0v2opT7sVtDBDNlutvT2V/t
d35+v+Pl7aY3Tzq/+Hjki6djn9we/OLO+MdXex5dbn603Xhrt/za9YKnH9dd
fzMbnCFFso+gmEcJHFdoGg6yC8Uy7Rebj2PxsEIpTa2VuSvFApHQw1PjGWiQ
aVViqUjC56jYbE8GWUNBlsf6XJtv219q2pwpmu6KvDpbcGuxCvB8u937yc2u
L+8Nff9s4sdPF+5eqjs3nHRxMmsNeHK+eP9i1f2NuqdbzWCbJxvVb64131su
nmoKXhlKvjSavj6ctjGUAULlSnv8dLnxSk/qekfiqWKf+Zqgrf6UnZG0xZbQ
4TzFUkvcdFnIQJrXiVz/aXP4uerEiaLwhdqEi+0ps/VRy/0pmxN5K+MZ6zP5
G2cKT7RHdPfnjgwW1hSF5kYqQGmUZZSFeTDjQ9UF+bFaHxGJ7sBi2KnYDvEK
bEMIbyxRtTsU/+lGzb886f/qec9nL7pfPul4cLPp0fW21zcG3u4OfHZt4O21
7md7TXf2Su4+Ln30pjy5JsCOdoQidkQSP8LijpMIDkScHRZzlESxpTDsGDxn
kZQgdWcKuAwxl69XeiuNOolGIZfLFHyBB4OppZKC+NRz3WUPVgeuXaifG0ra
OFOwu1h2baH06XrrFzdG//Lx1I9vTv/wdu6/vloEaX2uL+bKXOGFE2mrp3Ku
Lpg3Z3NvrVQ+2256db3l8Wb1bHfw/EjWBcBwvODKqdLNE0Vnm+KmykLma6MX
mxIud2acb4hd7Uy9PJhzZTR3qStpvjX2UlfKfF3kcI5htsJ0oSF5Z7D0Ykv6
enf2jcnya5Pmm2fKby9Vg7bwZLf93pXmUwOx5bWRra1JZTl+5gR1mBRr5KMC
pKRQvSTQqGAI0CSWE51uY/TA5/oxT6R73+3K/PpKw5/u9X37oOPj2w0fP259
cLfh5k7Nyzu9n90eebzS8vZq92c3et7eb3vysOreE/Pyjoni6YTkfeCMP0Ig
HacSbPCuv6G4fUhC/YaEO4InHKHQjzLZTgwags8geQqlvjIvfx+tzFPGlQuE
PLoXFRNCdenK9L++3rq6UndpvnZ9tPzmeN3Nqaona3Wvb1Z/97zpL1/M/vXr
83/9ZvlfvlpbnK2aGio4O1qyMGw+P5C7PJC5Ppr1bL3p3nL19YWSxbGU5cmM
vZn8zZMZD5ardk8XAKMudMWsjaRN1AZPN0dMNYad7YzfO1PxcKX5zvmGxb70
s93JVwbLzjdnjhSFnmlJWxksOFkfvTFh3popWZ/Ku3+p6dbFuie7/XuX2m/v
DF+cb+xqSc40+eQmBBamhkUFechFJBrFxUMt9A3Q8EV0MhlBI0D/KE/wZVTE
CrfGMr+91vH7N0OfPur+7OngZ8/Gn9wceLDd92r/5Ls7p19fG3u1O/p6f+zR
reHrt3pufjz28seVgqEgLMsew7RDUm1cScedCcctN+HYOWEdXXFObngEhogi
UtBkGpbJIklkbLWXNNDoI/WQgpJeLuUAnoky6s3ZprtbPSvLNWtna3ZO1T8/
1/v4XOujtdpXe9V/etv156/m/vTF/B++XPzr76/sXOo62Z8z2ZNzqitrtjPt
THvC5njuznQByPKb07mg+e+v1l6ZAIVW2c50/t6c+cpEzlJ/IgSzMXyuPXp3
pvTZRsfDi61P1jrO96QuDmZeGi8ARebZxpSNoeLl3vyp+rit6crXu0PrkwU3
F6ufXu14d3f8wdXu3ZWWx7cm1863tNTFZkf7xQV55ieHhBtVHCZKKWeHhOk5
PDIK40DEO/IZrnoZpjhBNd+Z9OlW5x/vDHzxtOfbVyOfPhl4cbf3zcPRTx5O
vLkz/uWDU5/un/jq/uSn908+uzf68Nn4lz9evfH5DC/UCcd2+Ikn3tYJB2QP
eEIDeBLcsCS0ladIwlR5igw+0OSGAk+xkE/WMrEFPuJvbs3c3epeW64B/rw+
0/TsQv/z5Z6Pr3Z8/bjnf/x+6sffX/jjl/Pff37+b3/Yfnbv9PRI4Whb2lhz
8nhT3FxbwoUeKFQuDSTdvVj78no3KAAeLNdsn8oDngSl6fVZ82RdyHh14GRD
OCjmX28NAFtuTZVcn6083RZ/tjsFxITljszzrWlbJ8ouDRfdOd/8yd7Y5nTJ
3rnqe2uNb28OPt3q3rlQuzhVevlcy/nTdeZcf2BObxnDFOgZ7KfkMDDu7mxv
bzka7UDCOdEJ9moRJs6f218ZdnO+6ssbvd/sd3/2qPPzp30v7raDDP76Uf8n
T0be3Ov/9P7gJ7f7vngw+ure0MvHJ+4+GX/1/aWiPpOd4AjEk2HvRjnuQjxm
ubHhwJ8wT9ifoHvOYpMBT6WHUB/g4+GrEXiIQKdez8V2pRv/+mxxf6NlbbHi
8rnavdnGR/NdrzeGfvf41L9+Ofe//rjwr39Y+cNX5/7lq4t/+u7yF68vLs/V
jbSmDtXHn2yOXxzMOtedAlLGQnf87aXavQtVG9MFtxbKAeFzXfFPVptXR7KG
KwL6zL6nm2Nebw1unyo705641J8535O6PJyzM1sJqqClztSrY8VLvVkPL7bd
WWpeO1lw43zN4822B+vNr/b695fr12fLZodyTg3kdzUmZyZpM6J95RycWsbU
eop4PBqTSSSRUESsMxPvxMMfD/OkVKdqLwxlPr/a/m6/+4vb3V+C0n2/+eP7
7Z+96P/kWS/Ql8/7AORnew1fPx9+eb9nd6vx6o2eO28XeP4Ye/4RLNMBRbMF
5nTCH3PAQPc1OWBsHTEOoL0jcK5oAhLwpDLwbA5FLGVBPEOMYi+F0FOo8eBq
mM4Xuwv+/c3F7Qtly/NFlxcq755ve31p+Ps7s3/75MJ//m7pv74/99fvV3/3
5YW/fL/5uy/Wvv1sfWetB/Dsr4kZqo5a6Mm40Js+URdxridp9UTO6njuuaG0
S2NZVybzQZED+piT9ZE9hT7D5UFXJkofLLfPd6SPVEUOV0ZsTlasjhYCXRzO
X+5J2xjLvzFX9WC1bWPKvD1X9uBSK2js+0s1IHg+3+k/O5Q92Z0x0JySHueZ
neidEOqlFJOlQqpAwGCyqDQ6CYtyYRIQXKytlu1cGqsEp+zOcs1XD0fe3e99
e6/73YOuj283vXvS/c3bwc9edn76rO3dy7ZPnzR98rDpxe36vSsVG+tV1+4M
Ty43ufCPOgntgDlBY3eBbiY5epinCwihWBcU3o1ARgF/QjwlHMDT09/XXaeR
eopkAkKokvTwfPtX+6Prs3kbC0U75yueb/R8e/PUD88v/OXNwr9/u/R///ni
H79f+5ffrf34593vv7nyu88vX9/oB+19oDZ2vDHhdHvKWE3keE34XGfiCsjX
I9krJ/NXhjNBnlobyZ3vTO4vNg6VhgKMS4OFV6aqhytNXYWBEw0J4OnyUNH5
vpxLJ0qW+pL3ZsuhGdNWm59v9dxdawYYQdl2ZdZ8c6nu0dWewfrIgYb4yhxj
Row6M947KUrnIaMJeCQOl44n4shkIhHjxkA7KihOJiV+uDjg6UrDN/cHv3k6
/PH9zlcPAc+O718Nf/6k8/mtmud3a1/cr/n4XtUnj+vfPWu5tVV87UrF/s2u
jZ2+sFQPV669C98ZmBNBtnEmHAU8LXcxQe39wJ94ZxTBFU9CkqgYBpMoEDLl
wJjGQLWfr6eXu5yDacsP+2x39OHF2q35vJ0LRTeXK19v93y7P/6XZ2f/9Gru
33+3+D9/uPTDX3b/9sP1v/xx929/vvXdu82Vsw2A52hT0vxg4URTYm9x0Hx3
+unWxKXB3NnOlHP9WXOdSdOtcWDl8lBeZ4H/qebk/pKIjryg872FJ+uSqhI0
kw0p53oA9tLTralb07Ugxi4Ppu5fqAZt/N6lpptLNbsL5eARIL2z2rQyWdRf
G9lREVmc5lueE5oQ5hkXqVbJ6QwWlsVnoAg4DA5LQCOYaHsdyznLQDtdE/LV
Xvcfn4998aTv9ZPet29Gvnna/f2rwU8etD7cKX18o/z57coXd6rePmp6eK3s
3vWa/d3GC+crKhsiBZ54ohjtxITGP4TNaY/50MFyQzjwpwPaHuaJJiIAT2BR
Kg3H49Pd5QKvoAiu1N3LU+Yjo53vL/p0d/DOYvn22ZyrZ7Nvr5SD4vbdXv+f
nk//8NnZ/+uPq//xp+V//7e7//Ufj77/bvs///bwyzdrII4NNSdPtGeMNSU1
ZBj6ysIWBwrOdmVMNMSBjD/fm3WmE3S0U+a7M0eqonrNYa3ZAUUR8vac0Im6
9PoUP3OE6mRdylRjKtCFvsL5rtzNiZzLU7n7FypBwARdv5srdbcvNZ4dSt6Y
LlqZLBxtih5piq8rCGosjspLNgZouD5atpeGDU2rzSQiSXgMEUvCIoRE52AJ
tilRudIZ++nVxs9vt3/2rO/N6+EnL/s/vlH78ErJ093KF/t1j69VPtmrfb7f
8HC3Zm+9bPVs7nBvTGW5Ue9HZ0tRDrijrnQX2Jl26A9skR/aoT6y3LtoY4c6
Dto7zBNHdANIKVQs4An8qTZGaHQ+IJYnB7g/2xh9ttH2cK1qay5rZz73zmrZ
i+3md7f7//XzhR/ezf3w7bkfv1/84Yf7f/vbw99/s/ufPz66f30CFEvnTpSd
GSgcqY0/P2i+NF4505453Zp+ojZ2sjFxriNtui15qiVxsjmpvyyyJllfn+Zf
GqOtjPdpzgwtilAXRXo2pAf0lcRMNKTNdmSDE3pxKOX6fOn2mRJgy/3V+s0z
pcsTuWvThVfOlo01R/VWh1dlGyoyjZV5kRF+MoMHWybBMlguFDYaCUokKoFE
J2JRDgKyU5AUXR7JW2iJeHyx/OvHfb/7fOrdF5NP347eu2zeW869v1n+4mbL
y/02kNyf7XVtzpsne+OrCjTxERw/A0nhgSdQbVE0R1eygwvRBjjTxu0DGKYd
6qgt8hiQE9reMoanKxrnAnhCY69ZeOqDYzw9tF48VnNm+Hd3z4DQff180c3F
ojsrpY+v1D/ZbvzD66kfvzz3b98t/fnrc999fvbb7269+2znz9/ffXJ7brw7
5+q5tgtjZWf7C6+cbtiYqp3pzB6uip1sSh2vTwRIgc70ZJ9qS51uz+gxRzZn
BTWmBxeEqXOClEUR3p35MfWpweWx+pbs4OHK+Jm2nFMt6YtDqZdO5qyMZ62c
zF09VbA+W7x1rnpzrvzcSNZgXcT5MfPZkeL8RF1ZVkREgEIlofD5CArdkcqB
5rHFMQhkFkkopKZE6nsr40FfANTDb/a6fv9m6t2byUfPhm8/Hbx/tXJvxXz3
cs3DrZZrS7Wr08UnOhLKM7wSgtlRRrbOExvgw/bx4eFJNjiagwvuGKg57dFH
D5kTID1uDw0JfsATg3cF7R3mCdq7yhDs6+3nL+IMmuO+3J/av1i9d7H82vni
F7ttT691PLre8frh8H/8cf3//K97b55O7V3rvHhx+PR008xk3UB7dmtZ5MJw
6Xhzam9Z5FRL5kKf+WRj2nhD6smG5KHKmPHahPnu7LO9ebNd2T2lEVXJhta8
8MpE/+IoQ1Gkocec0luUUhDmBdjWpxlbc0IGymJm2rMujmbNdMSeaotdGEyf
H8q4OFW0c6Fu7XTJREfiVFfqmeGisgzf+ECpOSM8yeQT4qvkCzFMDpLMgiYd
QFHQOBqaxkAHGETlWYE9lVGXZys/fzT13afnHt4fWbvafGGjbmU2+/xk+oXJ
7NMDaU1mY36CKj3SPSZAEOknCPbhB/rwFO4EH4OATHPAk+yQlntoQdgEMIEz
YUF/kIeGtHVEkaDbOEF7ByWTlaenT5BO6amjEZY6zH99tbR/ueHapeobqzVP
d7v3N1tvXev6n//j9v/6zztt9aG+erSXFumhoqsUFAnHJcKX21OdUJ8d0Jof
2JgV0F8eM9mc1VcWe6I+bawuebAierQq9nRL+mhjYrs5tDrdZ7g6pSkrNF4r
aMmOGaspKIzwyQnWdhUmlcYacoMVnQWm1pygoYo4kL8mm6LHG03THUmzfekr
UyWbZ6pn+zMmOpJXpipaSkLB4SdHeA51lSdF+SdGGz29+BqdROjOdCO7IMlu
eDrGFXUcjfoQ5XwE53yEiTuidXdOjBEVl/hW1UdUNkW21QUW5yizEiUpUeJw
X7ZRQ/dTMbykZA8pSadmE7BHTZFeuflReIKtK/JDtKWAh2/5trR0QBWkeDsX
AjS0F5oMDYsKzAn6R9DYlXyQ38XegcH+GrWRS7oyUvn1g+lzM9mrF0rvbHdv
Lzc9uTv58uOFMwuViUkyIe+YVIYQSlFCPkElpfqo2TH+oo6SmIpEbXmcpikz
oD7NF8DsLU+YbMsBYEE8PFmXOFmX2FUa0VIQ1FMe21MWH6vjZQar+0szS6KM
ucG6ifqSmuTwvFBNdbJ/UZS6Lt1/uDphpCIURF1Qeo3WR4+3JJwfK1yeAOZM
nhvI7amJTouQxBoFkf7iwowI0CHSaSQKlcDg56nQiLFUN1eCC4aOBEfqgjyK
xByjkO2YdEcy8UMCfOGCZ8sW2HuqXNQqN389Lcwo9PPmaJUMnQfHoOGDIkGp
oAeHeJ6c6tR48x2cjwCYbqjj1v8b/pIn8KeVJ41O5PIYgKfG6K9XSYxszNZo
+ZePTy0tmpcuVm+utT29O3vz+lSQSUDhfcQROvAEbhIFlS7Ai/kUuYjm78mN
8RVnhsgr4r2bMvzbc4O7i0xTLbnnBiunOwp7S2MGy2NP1CScALG0LaOlIKQp
L8Qc621Sc3LCdIUm/+acpKWB9urE8PwwfV6oFli0PEFfHKMGPMerY0CUmG5L
Ha2LH6yNBT2FEy0pp3qzhpoSyzN0xaneccGSpAiNj4bvp5fTKG5UBpErYDJ5
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
    "], {{0, 150}, {112, 
    0}}, {0, 255},
    ColorFunction->RGBColor],
   BoxForm`ImageTag[
   "Byte", ColorSpace -> "RGB", Interleaving -> True, MetaInformation -> 
    Association[
     "Source" -> 
      "http://www-groups.dcs.st-and.ac.uk/~history/PictDisplay/Galileo.html", 
      "URL" -> "http://www.wolframcdn.com/waimage/hset028/e86/\
e86982b90696704c0aa8d78d03f35af5_v002s.jpeg"]],
   Selectable->False],
  DefaultBaseStyle->"ImageGraphics",
  ImageSizeRaw->{112, 150},
  PlotRange->{{0, 112}, {0, 150}}]], "Output",
 CellChangeTimes->{{3.706918895391993*^9, 
  3.70691890061417*^9}},ExpressionUUID->"18eaaae2-df91-49fb-ae63-\
bb4214aab329"]
}, Open  ]],

Cell["inclined plane", "WolframAlphaLong",
 CellChangeTimes->{{3.70691495802444*^9, 
  3.706914971055678*^9}},ExpressionUUID->"d9ef9a9c-ed3f-48bc-a914-\
85264d8996ed"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"WolframAlpha", "[", 
  RowBox[{"\"\<inclined plane\>\"", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"\"\<Schematic\>\"", ",", "1"}], "}"}], ",", 
     "\"\<Content\>\""}], "}"}]}], "]"}]], "Input",ExpressionUUID->"de23868c-\
f330-4970-a313-5d2901737b99"],

Cell[BoxData[
 StyleBox[
  FormBox[
   GraphicsBox[{
     {GrayLevel[
       NCache[
        Rational[16, 17], 0.9411764705882353]], 
      PolygonBox[
       NCache[{{0, 0}, {Cos[Rational[3, 20] Pi], Sin[Rational[3, 20] Pi]}, {
         Cos[Rational[3, 20] Pi], 0}}, {{0, 0}, {0.8910065241883679, 
         0.45399049973954675`}, {0.8910065241883679, 0}}]]}, {
      {GrayLevel[0.5], AbsoluteThickness[1], Dashing[{Small, Small}], CapForm[
       "Butt"], 
       CircleBox[{0, 0}, Offset[80], 
        NCache[{0, Rational[3, 20] Pi}, {0, 0.47123889803846897`}]]}, {
       {GrayLevel[0.5], AbsoluteThickness[1], CapForm["Butt"], 
        LineBox[{{0, 0}, Offset[{80., 0.}, {0., 0.}]}]}, {}}, {
       {GrayLevel[0.5], AbsoluteThickness[1], CapForm["Butt"], 
        LineBox[{{0, 0}, 
          Offset[{71.28052193506943, 36.31923997916374}, {0., 0.}]}]}, {}}, 
      InsetBox["\<\"\[Theta]\"\>", 
       Offset[{56.00850741490616, 13.44645295810015}, {0., 0.}], {0, 0},
       BaseStyle->{FontSize -> 14, 
         GrayLevel[0.3]}]}, 
     {GrayLevel[0.78], 
      GeometricTransformationBox[
       DiskBox[Offset[{0, 1}, {0.65, 0.07}], 0.07], {{{
        0.8910065241883679, -0.45399049973954675`}, {0.45399049973954675`, 
        0.8910065241883679}}, {0, 0}}]}, {
      {GrayLevel[0.5], AbsoluteThickness[2], CapForm["Butt"], 
       LineBox[{{0, 0}, {0.8910065241883679, 0.45399049973954675`}}]}, {}}, {
      {GrayLevel[0.5], AbsoluteThickness[1], CapForm["Butt"], Arrowheads[
       Small], ArrowBox[{{0.39590379662864833`, 0.2802858965681682}, {
        0.21770249179097473`, 0.18948779662025886`}}]}, InsetBox[
       StyleBox["\<\"a\"\>",
        StripOnInput->False,
        FontSlant->Italic], 
       Offset[{-8.910065241883679, -4.539904997395467}, \
{0.21770249179097473, 0.18948779662025886}], {0.8910065241883679, 0.4539904997395467},
       
       BaseStyle->{FontSize -> 14, 
         GrayLevel[0.3]}]}, 
     {Arrowheads[Small], 
      {GrayLevel[0.5], AbsoluteThickness[1], CapForm["Butt"], 
       ArrowBox[CompressedData["
1:eJwVjn1Q03Ucx4cQijER8KZeI04lzlCTYaYO7B0oIFpi28hAeZBgmRraCsXL
UBNPxCfgCM5hPN4xTeSIwHzC3ML5kDIT4vfwHSP6fVAYnHUjOKEzoj9e97rX
f6956bs1mVNkMtmySf53wzdH/AafElY7fvfeGMAhf66pK3KyM5bKIkrDOSxf
e/Uf3RNCeZpJxyVysOjDSoL6CNdZz/iMHA5179p+bJQIBdW7O9SlHHq3nTky
1ksg7bS8D5s5KPc0zZ3oIeQu2ftD5mMOLldLtbmbUCe1e6X9xcHorlkXyQjx
WVWh0TN4qOzZyOUJt5sCO/wW82CuNTdzfiN8It9cYY3jEXxJ7qZ6THhwWReZ
8jGPgYsb40zthFJZ4qdcHg+PRlM3u08o0Xt0La3hkTNH8LJZCZv3HFVl/sRj
4fiNVw9bCI5U68psO4/OX98xuFoJFReMpuQxHlcepaQuuEo4EDYUoVQISG9T
xMxqJig39V9rCBMQa9SfuN1A8M5f/NQvXoDpYNTZFRcIm6YPF8TsFJBVcdKx
o3byT3r789hjAir3edtSvyUE9U39zL9WgK89U1KUEWrU+sTzNwUo8nzOFhYS
LN+3vuQhCuiJiTM8PE7483y/NmhEQILLd/Th14SVdenBU2eKULUpG4u/JBQW
GTK+CxGx6Kg1VPkFIemMbvzlaBGzY6fLd+4ivNj3kfB6qohfrNmOgxkEDEQ+
d9svwmwIWLNlKyHi2RRtcbGI5NmF3S+0hDa1ZpC/KOKu6r5u+wbCv6Pldzva
RGQ5F+rKowjRc958fqhbxMwrW0+UrSL4rf3qlGNExIH6LQ3JoQR3tU+NU84w
bZc2+1kwYdhsT6h9jcH2yHhufQDhrVcSbZ6rGZzqWjL4E9yc58L9dQzNpwd8
t3sRllUVtFt3MHzwx5OhkAkJBSkuS+BhBjOTRd34W0LphpYkZRlD/K39vUqn
hKLkfse1egbNirTK93ok7C0ZrRwzMzy4lauN75RQVW0Z6epiqOpdL8y/JyFp
/A7eH2Q45tnpc69VglUT3qefYJgX2CRENUkozg1JUPjbccg1rCyqk+DeUu6Z
EmxH/hvyn5uNEoaW1+dErLLjP5XoqTQ=
        "]]}, 
      InsetBox["\<\"\[Omega]\"\>", NCache[
       Offset[{(-6) Sin[27 Degree + Rational[3, 20] Pi], 6 
          Cos[27 Degree + Rational[3, 20] Pi]}, {0.6126350221251906, 
         0.4409934214062037}], 
        Offset[{-4.854101966249685, 3.526711513754839}, {0.6126350221251906, 
         0.4409934214062037}]], 
       NCache[{Sin[27 Degree + Rational[3, 20] Pi], -
         Cos[27 Degree + Rational[3, 20] Pi]}, {
        0.8090169943749475, -0.5877852522924731}],
       BaseStyle->{FontSize -> 14, 
         GrayLevel[0.3]}]}, {
      {GrayLevel[0.5], AbsoluteThickness[2], CapForm["Butt"], 
       LineBox[{{0.5473749057406708, 0.35746428152389115`}, {
        0.6173749057406708, 0.35746428152389115`}}]}, 
      InsetBox["r", 
       Offset[{0., 10.}, {0.5823749057406709, 0.33546428152389113}], {0., -1.},
       
       BaseStyle->{FontSize -> 14, 
         GrayLevel[0.3]}]}},
    ImageSize->{300.}],
   TraditionalForm], "Output",
  CellSize->{550, Automatic},
  ScriptLevel->0,
  RenderingOptions->{"3DRenderingMethod"->"BSPTreeOrDepthBuffer"},
  FontFamily->"Times",
  FontSize->14,
  Background->None,
  GraphicsBoxOptions->{
  DefaultBaseStyle->{
   FontFamily -> "Times", 
    "Graphics", $CellContext`GraphicsBoxOptionsDefaultAxesStyle -> Directive[
      GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 1, 
      "GraphicsAxes"], $CellContext`GraphicsBoxOptionsDefaultTicksStyle -> 
    Directive[
     FontFamily -> "Times", FontSize -> 10, 
      "GraphicsTicks"], $CellContext`GraphicsBoxOptionsDefaultFrameStyle -> 
    Directive[
      GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 1, 
      "GraphicsFrame"], $CellContext`GraphicsBoxOptionsDefaultFrameTicksStyle -> 
    Directive[FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"]}},
  Graphics3DBoxOptions->{
  DefaultBaseStyle->{FontFamily -> "Times", "Graphics3D"}}]], "Output",
 CellChangeTimes->{
  3.706915020949486*^9},ExpressionUUID->"803492df-7f0b-47b5-998a-\
740856de427d"]
}, Open  ]],

Cell[CellGroupData[{

Cell["inclined plane", "WolframAlphaLong",
 CellChangeTimes->{{3.7076806944933863`*^9, 
  3.707680703421678*^9}},ExpressionUUID->"c26de6ab-21fc-47e4-b41f-\
d29d2feff2ee"],

Cell[BoxData[
 NamespaceBox["WolframAlphaQueryResults",
  DynamicModuleBox[{Typeset`q$$ = "inclined plane", Typeset`opts$$ = {
   AppearanceElements -> {
     "Warnings", "Assumptions", "Brand", "Pods", "PodMenus", "Unsuccessful", 
      "Sources"}, Asynchronous -> All, 
    TimeConstraint -> {30, Automatic, Automatic, Automatic}, 
    Method -> {
     "Formats" -> {"cell", "minput", "msound", "dataformats"}, "Server" -> 
      "http://api.wolframalpha.com/v1/"}}, Typeset`elements$$ = {
   "Warnings", "Assumptions", "Brand", "Pods", "PodMenus", "Unsuccessful", 
    "Sources"}, Typeset`pod1$$ = XMLElement[
   "pod", {"title" -> "Input interpretation", "scanner" -> "Formula", "id" -> 
     "Input", "position" -> "100", "error" -> "false", "numsubpods" -> "1"}, {
    
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "FormulaData[{\"InclinedPlaneRolling\", \"PureRolling\", \"SlopeAngle\
\", \"MomentOfInertia\"}]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             GridBox[{{
                PaneBox[
                 StyleBox[
                  TagBox[
                   GridBox[{{
                    StyleBox[
                    "\"round object on inclined plane\"", {
                    LineIndent -> 0, LineSpacing -> {0.9, 0, 1.5}}]}}, 
                    GridBoxBackground -> {"Columns" -> {
                    GrayLevel[0.949]}, "Rows" -> {{None}}}, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    ColumnsEqual -> False, RowsEqual -> False, 
                    GridBoxDividers -> {"Columns" -> {
                    GrayLevel[0.84], 
                    GrayLevel[0.84]}, "Rows" -> {{
                    GrayLevel[0.84]}}, 
                    "RowsIndexed" -> {
                    1 -> GrayLevel[0.84], -1 -> GrayLevel[0.84]}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {1, 1}, "Rows" -> {{0.3}}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Baseline}}}, 
                    AllowScriptLevelChange -> False, BaselinePosition -> 1], 
                   $CellContext`TagBoxWrapper["Separator" -> " | "]], 
                  LineSpacing -> {1, 0, 1.5}, LineIndent -> 0], 
                 BaselinePosition -> Center]}}, 
              GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
              ColumnsEqual -> False, RowsEqual -> False, 
              GridBoxSpacings -> {"Columns" -> {{
                   AbsoluteThickness[-1]}}, "Rows" -> {{0}}}, 
              AllowScriptLevelChange -> False], 
             $CellContext`TagBoxWrapper["Separator" -> " | "]], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {
              FontFamily -> "Times", 
               "Graphics", $CellContext`GraphicsBoxOptionsDefaultAxesStyle -> 
               Directive[
                 GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], 
                 FontOpacity -> 1, 
                 "GraphicsAxes"], \
$CellContext`GraphicsBoxOptionsDefaultTicksStyle -> 
               Directive[
                FontFamily -> "Times", FontSize -> 10, 
                 "GraphicsTicks"], \
$CellContext`GraphicsBoxOptionsDefaultFrameStyle -> Directive[
                 GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], 
                 FontOpacity -> 1, 
                 "GraphicsFrame"], \
$CellContext`GraphicsBoxOptionsDefaultFrameTicksStyle -> 
               Directive[
                FontFamily -> "Times", FontSize -> 10, 
                 "GraphicsFrameTicks"]}}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          CellSize -> {550, Automatic}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,computabledata,formatteddata"}]}]}], 
   Typeset`pod2$$ = XMLElement[
   "pod", {"title" -> "Equation", "scanner" -> "Formula", "id" -> "Equation", 
     "position" -> "200", "error" -> "false", "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             GridBox[{{
                TagBox[
                 GridBox[{{
                    StyleBox[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    PaneBox[
                    StyleBox[
                    TemplateBox[{
                    TagBox[
                    TagBox[
                    RowBox[{"a", "\[LongEqual]", 
                    FractionBox[
                    RowBox[{
                    StyleBox["\"g\"", Italic, StripOnInput -> False], " ", 
                    "m", " ", 
                    SuperscriptBox["r", "2"], " ", 
                    RowBox[{"sin", "(", "\[Theta]", ")"}]}], 
                    RowBox[{
                    RowBox[{"m", " ", 
                    SuperscriptBox["r", "2"]}], "+", "I"}]]}], HoldForm], 
                    PolynomialForm[#, TraditionalOrder -> False]& ]}, 
                    "RowDefault"], {
                    GrayLevel[0], LinebreakAdjustments -> {1, 100, 1, 0, 100},
                     LineIndent -> 0}, StripOnInput -> False], 
                    BaseStyle -> {{
                    Alignment -> Left, BaselinePosition -> Baseline, 
                    FontColor -> GrayLevel[0.3]}, 
                    LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Left}, BaselinePosition -> Baseline], 
                    $CellContext`TagBoxWrapper["Label"]], "\[SpanFromLeft]"}, {
                    TagBox[
                    PaneBox[
                    "a", BaseStyle -> {{
                    Alignment -> Left, BaselinePosition -> Baseline, 
                    FontColor -> GrayLevel[0.3]}, 
                    LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Left}, BaselinePosition -> Baseline], 
                    $CellContext`TagBoxWrapper["Label"]], 
                    "\"acceleration\""}, {
                    TagBox[
                    PaneBox[
                    "\[Theta]", 
                    BaseStyle -> {{
                    Alignment -> Left, BaselinePosition -> Baseline, 
                    FontColor -> GrayLevel[0.3]}, 
                    LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Left}, BaselinePosition -> Baseline], 
                    $CellContext`TagBoxWrapper["Label"]], "\"slope angle\""}, {
                    TagBox[
                    PaneBox[
                    "m", BaseStyle -> {{
                    Alignment -> Left, BaselinePosition -> Baseline, 
                    FontColor -> GrayLevel[0.3]}, 
                    LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Left}, BaselinePosition -> Baseline], 
                    $CellContext`TagBoxWrapper["Label"]], "\"mass\""}, {
                    TagBox[
                    PaneBox[
                    "r", BaseStyle -> {{
                    Alignment -> Left, BaselinePosition -> Baseline, 
                    FontColor -> GrayLevel[0.3]}, 
                    LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Left}, BaselinePosition -> Baseline], 
                    $CellContext`TagBoxWrapper["Label"]], "\"radius\""}, {
                    TagBox[
                    PaneBox[
                    "I", BaseStyle -> {{
                    Alignment -> Left, BaselinePosition -> Baseline, 
                    FontColor -> GrayLevel[0.3]}, 
                    LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Left}, BaselinePosition -> Baseline], 
                    $CellContext`TagBoxWrapper["Label"]], 
                    "\"moment of inertia\""}, {
                    TagBox[
                    PaneBox[
                    StyleBox["\"g\"", Italic, StripOnInput -> False], 
                    BaseStyle -> {{
                    Alignment -> Left, BaselinePosition -> Baseline, 
                    FontColor -> GrayLevel[0.3]}, 
                    LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Left}, BaselinePosition -> Baseline], 
                    $CellContext`TagBoxWrapper["Label"]], 
                    
                    TemplateBox[{
                    "\"standard acceleration due to gravity on the surface of \
the earth\"", "\" \"", 
                    StyleBox[
                    RowBox[{"\"(\"", "\[NoBreak]", 
                    TemplateBox[{"\"\[TildeTilde]\"", "\"\[ThinSpace]\"", 
                    StyleBox[
                    TagBox[
                    TagBox[
                    TagBox[
                    RowBox[{
                    TagBox["9.807", 
                    $CellContext`TagBoxWrapper["StringBoxes" -> "9.807"]], 
                    "\[NoBreak]", 
                    StyleBox[
                    RowBox[{}], FontFamily -> "Helvetica", FontSize -> 
                    Smaller], "\[InvisibleSpace]", "\[ThickSpace]", 
                    "\[InvisibleSpace]", 
                    StyleBox[
                    
                    RowBox[{"\"m\"", "\[InvisibleSpace]", "\"/\"", 
                    "\[InvisibleSpace]", 
                    SuperscriptBox["\"s\"", "2"]}], FontFamily -> "Helvetica",
                     FontSize -> Smaller]}], Identity], #& , SyntaxForm -> 
                    Dot], "Unit", SyntaxForm -> Dot], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0, ZeroWidthTimes -> False]}, "RowDefault"], "\[NoBreak]",
                     "\")\""}], {
                    GrayLevel[0.6], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}, StripOnInput -> False]}, "RowDefault"]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {Left, Left}, "Rows" -> {{Baseline}}, 
                    "ItemsIndexed" -> {{1, 1} -> {Left, Baseline}, {1, 2} -> {
                    Left, Baseline}}}, AutoDelete -> False, 
                    GridBoxBackground -> {
                    "Columns" -> {None, None}, "Rows" -> {None, None}}, 
                    GridBoxFrame -> {
                    "Columns" -> {{True}}, "Rows" -> {{True}}}, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{1.5}, 2}, "Rows" -> {{1}}}, FrameStyle -> 
                    GrayLevel[0.84], BaselinePosition -> Automatic, 
                    AllowScriptLevelChange -> False], "Grid"], 
                    LineSpacing -> {0.9, 0, 1.5}, LineIndent -> 0, 
                    StripOnInput -> False]}}, 
                  GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  DefaultBaseStyle -> "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                 "Column"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
              DefaultBaseStyle -> "Column", 
              GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
             "Column"], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {
              FontFamily -> "Times", 
               "Graphics", $CellContext`GraphicsBoxOptionsDefaultAxesStyle -> 
               Directive[
                 GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], 
                 FontOpacity -> 1, 
                 "GraphicsAxes"], \
$CellContext`GraphicsBoxOptionsDefaultTicksStyle -> 
               Directive[
                FontFamily -> "Times", FontSize -> 10, 
                 "GraphicsTicks"], \
$CellContext`GraphicsBoxOptionsDefaultFrameStyle -> Directive[
                 GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], 
                 FontOpacity -> 1, 
                 "GraphicsFrame"], \
$CellContext`GraphicsBoxOptionsDefaultFrameTicksStyle -> 
               Directive[
                FontFamily -> "Times", FontSize -> 10, 
                 "GraphicsFrameTicks"]}}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          CellSize -> {550, Automatic}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,computabledata,formatteddata,formuladata"}]}], 
     XMLElement["infos", {"count" -> "1"}, {
       XMLElement["info", {}, {
         XMLElement["units", {"count" -> "1"}, {
           XMLElement[
           "unit", {
            "short" -> "m/s^2", "long" -> "meters per second squared"}, {}], 
           XMLElement["cell", {"compressed" -> False, "string" -> True}, {
             Cell[
              BoxData[
               FormBox[
                StyleBox[
                 TagBox[
                  GridBox[{{
                    StyleBox[
                    StyleBox[
                    TagBox[
                    TagBox[
                    RowBox[{
                    StyleBox[
                    
                    RowBox[{"\"m\"", "\[InvisibleSpace]", "\"/\"", 
                    "\[InvisibleSpace]", 
                    SuperscriptBox["\"s\"", "2"]}], FontFamily -> "Helvetica",
                     FontSize -> Smaller]}], Identity], "UnitOnly", 
                    SyntaxForm -> Dot], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0, ZeroWidthTimes -> False], 10, StripOnInput -> False], 
                    StyleBox[
                    "\"meters per second squared\"", {
                    FontSize -> 10, FontFamily -> "Helvetica", FontSize -> 
                    Smaller, 
                    GrayLevel[0.6], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}, StripOnInput -> False]}}, 
                   GridBoxAlignment -> {
                    "Columns" -> {Left, Left}, "Rows" -> {{Baseline}}}, 
                   AutoDelete -> False, 
                   GridBoxBackground -> {"Columns" -> {{None}}}, 
                   GridBoxFrame -> {
                    "Columns" -> {{True}}, "Rows" -> {{True}}}, 
                   GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                   GridBoxSpacings -> {
                    "Columns" -> {{1.5}}, "Rows" -> {{0.5}}}, FrameStyle -> 
                   GrayLevel[0.84], BaselinePosition -> Automatic, 
                   AllowScriptLevelChange -> False], "Grid"], 
                 LineSpacing -> {0.9, 0, 1.5}, LineIndent -> 0, StripOnInput -> 
                 False], TraditionalForm]], "Output", {
              Background -> None, 
               GraphicsBoxOptions -> {
                DefaultBaseStyle -> {
                  FontFamily -> "Times", 
                   "Graphics", \
$CellContext`GraphicsBoxOptionsDefaultAxesStyle -> Directive[
                    GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], 
                    FontOpacity -> 1, 
                    "GraphicsAxes"], \
$CellContext`GraphicsBoxOptionsDefaultTicksStyle -> 
                   Directive[
                    FontFamily -> "Times", FontSize -> 10, 
                    "GraphicsTicks"], \
$CellContext`GraphicsBoxOptionsDefaultFrameStyle -> Directive[
                    GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], 
                    FontOpacity -> 1, 
                    "GraphicsFrame"], \
$CellContext`GraphicsBoxOptionsDefaultFrameTicksStyle -> 
                   Directive[
                    FontFamily -> "Times", FontSize -> 10, 
                    "GraphicsFrameTicks"]}}, 
               Graphics3DBoxOptions -> {
                DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
              RenderingOptions -> {
               "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}]}]}]}]}], 
   Typeset`pod3$$ = XMLElement[
   "pod", {"title" -> "Input values", "scanner" -> "Formula", "id" -> 
     "InputValue", "position" -> "300", "error" -> "false", "numsubpods" -> 
     "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            StyleBox[
             TagBox[
              GridBox[{{
                 TagBox[
                  PaneBox[
                  "\"slope angle\"", 
                   BaseStyle -> {{
                    BaselinePosition -> Baseline, FontColor -> 
                    GrayLevel[0.3]}, LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Left}, BaselinePosition -> Baseline], 
                  $CellContext`TagBoxWrapper["Label"]], 
                 TemplateBox[{
                   StyleBox[
                    TagBox[
                    RowBox[{
                    TagBox[
                    TagBox[
                    RowBox[{
                    TagBox["27", 
                    $CellContext`TagBoxWrapper["StringBoxes" -> "27"]], 
                    "\[NoBreak]", 
                    StyleBox[
                    RowBox[{"\[InvisibleSpace]", "\"\[Degree]\""}], 
                    FontFamily -> "Helvetica", FontSize -> Smaller]}], 
                    Identity], #& , SyntaxForm -> Dot], "  ", 
                    StyleBox[
                    
                    RowBox[{
                    "\"(\"", "\[NoBreak]", "\"degrees\"", "\[NoBreak]", 
                    "\")\""}], {
                    FontFamily -> "Helvetica", FontSize -> Smaller, 
                    GrayLevel[0.6], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}, StripOnInput -> False]}], "Unit", SyntaxForm -> Dot], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0, ZeroWidthTimes -> False]}, "RowDefault"]}, {
                 TagBox[
                  PaneBox[
                  "\"mass\"", 
                   BaseStyle -> {{
                    BaselinePosition -> Baseline, FontColor -> 
                    GrayLevel[0.3]}, LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Left}, BaselinePosition -> Baseline], 
                  $CellContext`TagBoxWrapper["Label"]], 
                 TemplateBox[{
                   StyleBox[
                    TagBox[
                    RowBox[{
                    TagBox[
                    TagBox[
                    RowBox[{
                    TagBox["1", 
                    $CellContext`TagBoxWrapper["StringBoxes" -> "1"]], 
                    "\[NoBreak]", 
                    StyleBox[
                    RowBox[{}], FontFamily -> "Helvetica", FontSize -> 
                    Smaller], "\[InvisibleSpace]", "\[ThickSpace]", 
                    "\[InvisibleSpace]", 
                    StyleBox[
                    "\"kg\"", FontFamily -> "Helvetica", FontSize -> 
                    Smaller]}], Identity], #& , SyntaxForm -> Dot], "  ", 
                    StyleBox[
                    
                    RowBox[{
                    "\"(\"", "\[NoBreak]", "\"kilogram\"", "\[NoBreak]", 
                    "\")\""}], {
                    FontFamily -> "Helvetica", FontSize -> Smaller, 
                    GrayLevel[0.6], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}, StripOnInput -> False]}], "Unit", SyntaxForm -> Dot], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0, ZeroWidthTimes -> False]}, "RowDefault"]}, {
                 TagBox[
                  PaneBox[
                  "\"radius\"", 
                   BaseStyle -> {{
                    BaselinePosition -> Baseline, FontColor -> 
                    GrayLevel[0.3]}, LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Left}, BaselinePosition -> Baseline], 
                  $CellContext`TagBoxWrapper["Label"]], 
                 TemplateBox[{
                   StyleBox[
                    TagBox[
                    RowBox[{
                    TagBox[
                    TagBox[
                    RowBox[{
                    TagBox["10", 
                    $CellContext`TagBoxWrapper["StringBoxes" -> "10"]], 
                    "\[NoBreak]", 
                    StyleBox[
                    RowBox[{}], FontFamily -> "Helvetica", FontSize -> 
                    Smaller], "\[InvisibleSpace]", "\[ThickSpace]", 
                    "\[InvisibleSpace]", 
                    StyleBox[
                    "\"cm\"", FontFamily -> "Helvetica", FontSize -> 
                    Smaller]}], Identity], #& , SyntaxForm -> Dot], "  ", 
                    StyleBox[
                    
                    RowBox[{
                    "\"(\"", "\[NoBreak]", "\"centimeters\"", "\[NoBreak]", 
                    "\")\""}], {
                    FontFamily -> "Helvetica", FontSize -> Smaller, 
                    GrayLevel[0.6], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}, StripOnInput -> False]}], "Unit", SyntaxForm -> Dot], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0, ZeroWidthTimes -> False]}, "RowDefault"]}, {
                 TagBox[
                  PaneBox[
                  "\"moment of inertia\"", 
                   BaseStyle -> {{
                    BaselinePosition -> Baseline, FontColor -> 
                    GrayLevel[0.3]}, LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Left}, BaselinePosition -> Baseline], 
                  $CellContext`TagBoxWrapper["Label"]], 
                 TemplateBox[{
                   StyleBox[
                    TagBox[
                    RowBox[{
                    TagBox[
                    TagBox[
                    RowBox[{
                    TagBox["10", 
                    $CellContext`TagBoxWrapper["StringBoxes" -> "10"]], 
                    "\[NoBreak]", 
                    StyleBox[
                    RowBox[{}], FontFamily -> "Helvetica", FontSize -> 
                    Smaller], "\[InvisibleSpace]", "\[ThickSpace]", 
                    "\[InvisibleSpace]", 
                    StyleBox[
                    
                    RowBox[{"\"g\"", "\[InvisibleSpace]", "\"\[ThinSpace]\"", 
                    "\[InvisibleSpace]", 
                    SuperscriptBox["\"m\"", "2"]}], FontFamily -> "Helvetica",
                     FontSize -> Smaller]}], Identity], #& , SyntaxForm -> 
                    Dot], "  ", 
                    StyleBox[
                    
                    RowBox[{
                    "\"(\"", "\[NoBreak]", "\"gram meters squared\"", 
                    "\[NoBreak]", "\")\""}], {
                    FontFamily -> "Helvetica", FontSize -> Smaller, 
                    GrayLevel[0.6], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}, StripOnInput -> False]}], "Unit", SyntaxForm -> Dot], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0, ZeroWidthTimes -> False]}, "RowDefault"]}}, 
               GridBoxAlignment -> {
                "Columns" -> {Left, {Left}}, "Rows" -> {{Baseline}}}, 
               AutoDelete -> False, 
               GridBoxBackground -> {"Columns" -> {None, None}}, 
               GridBoxFrame -> {"Columns" -> {{True}}, "Rows" -> {{True}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {"Columns" -> {{1.5}, 2}, "Rows" -> {{1}}}, 
               FrameStyle -> GrayLevel[0.84], BaselinePosition -> Automatic, 
               AllowScriptLevelChange -> False], "Grid"], 
             LineSpacing -> {0.9, 0, 1.5}, LineIndent -> 0, StripOnInput -> 
             False], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {
              FontFamily -> "Times", 
               "Graphics", $CellContext`GraphicsBoxOptionsDefaultAxesStyle -> 
               Directive[
                 GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], 
                 FontOpacity -> 1, 
                 "GraphicsAxes"], \
$CellContext`GraphicsBoxOptionsDefaultTicksStyle -> 
               Directive[
                FontFamily -> "Times", FontSize -> 10, 
                 "GraphicsTicks"], \
$CellContext`GraphicsBoxOptionsDefaultFrameStyle -> Directive[
                 GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], 
                 FontOpacity -> 1, 
                 "GraphicsFrame"], \
$CellContext`GraphicsBoxOptionsDefaultFrameTicksStyle -> 
               Directive[
                FontFamily -> "Times", FontSize -> 10, 
                 "GraphicsFrameTicks"]}}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          CellSize -> {550, Automatic}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,computabledata,formatteddata,numberdata,quantitydata"}]}]}]\
, Typeset`pod4$$ = XMLElement[
   "pod", {"title" -> "Result", "scanner" -> "Formula", "id" -> "Result", 
     "position" -> "400", "error" -> "false", "numsubpods" -> "1", "primary" -> 
     "true"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "FormulaData[{\"InclinedPlaneRolling\", \"PureRolling\", \"SlopeAngle\
\", \"MomentOfInertia\"}, {\"\[Theta]\" -> Quantity[27, \"AngularDegrees\"], \
\"m\" -> Quantity[1, \"Kilograms\"], \"r\" -> Quantity[10, \"Centimeters\"], \
\"I\" -> Quantity[10, \"Grams\" \"Meters\"^2]}]"}], 
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            StyleBox[
             TagBox[
              GridBox[{{
                 TagBox[
                  PaneBox[
                  "\"acceleration\"", 
                   BaseStyle -> {{
                    BaselinePosition -> Baseline, FontColor -> 
                    GrayLevel[0.3]}, LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Left}, BaselinePosition -> Baseline], 
                  $CellContext`TagBoxWrapper["Label"]], 
                 TagBox[
                  GridBox[{{
                    StyleBox[
                    TagBox[
                    RowBox[{
                    TagBox[
                    TagBox[
                    RowBox[{
                    TagBox["222.6", 
                    $CellContext`TagBoxWrapper["StringBoxes" -> "222.6"]], 
                    "\[NoBreak]", 
                    StyleBox[
                    RowBox[{}], FontFamily -> "Helvetica", FontSize -> 
                    Smaller], "\[InvisibleSpace]", "\[ThickSpace]", 
                    "\[InvisibleSpace]", 
                    StyleBox[
                    
                    RowBox[{"\"cm\"", "\[InvisibleSpace]", "\"/\"", 
                    "\[InvisibleSpace]", 
                    SuperscriptBox["\"s\"", "2"]}], FontFamily -> "Helvetica",
                     FontSize -> Smaller]}], Identity], #& , SyntaxForm -> 
                    Dot], "  ", 
                    StyleBox[
                    
                    RowBox[{
                    "\"(\"", "\[NoBreak]", 
                    "\"centimeters per second squared\"", "\[NoBreak]", 
                    "\")\""}], {
                    FontFamily -> "Helvetica", FontSize -> Smaller, 
                    GrayLevel[0.6], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}, StripOnInput -> False]}], "Unit", SyntaxForm -> Dot], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0, ZeroWidthTimes -> False]}, {
                    StyleBox[
                    TemplateBox[{
                    StyleBox["\"=\"", {
                    GrayLevel[0.6], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}, StripOnInput -> False], "\" \"", 
                    StyleBox[
                    TagBox[
                    RowBox[{
                    TagBox[
                    TagBox[
                    RowBox[{
                    TagBox["7.303", 
                    $CellContext`TagBoxWrapper["StringBoxes" -> "7.303"]], 
                    "\[NoBreak]", 
                    StyleBox[
                    RowBox[{}], FontFamily -> "Helvetica", FontSize -> 
                    Smaller], "\[InvisibleSpace]", "\[ThickSpace]", 
                    "\[InvisibleSpace]", 
                    StyleBox[
                    
                    RowBox[{"\"ft\"", "\[InvisibleSpace]", "\"/\"", 
                    "\[InvisibleSpace]", 
                    SuperscriptBox["\"s\"", "2"]}], FontFamily -> "Helvetica",
                     FontSize -> Smaller]}], Identity], #& , SyntaxForm -> 
                    Dot], "  ", 
                    StyleBox[
                    
                    RowBox[{"\"(\"", "\[NoBreak]", 
                    "\"feet per second squared\"", "\[NoBreak]", "\")\""}], {
                    FontFamily -> "Helvetica", FontSize -> Smaller, 
                    GrayLevel[0.6], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}, StripOnInput -> False]}], "Unit", SyntaxForm -> Dot], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0, ZeroWidthTimes -> False]}, "RowDefault"], LineIndent -> 
                    0]}, {
                    StyleBox[
                    TemplateBox[{
                    StyleBox["\"=\"", {
                    GrayLevel[0.6], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}, StripOnInput -> False], "\" \"", 
                    StyleBox[
                    TagBox[
                    RowBox[{
                    TagBox[
                    TagBox[
                    RowBox[{
                    TagBox["2.226", 
                    $CellContext`TagBoxWrapper["StringBoxes" -> "2.226"]], 
                    "\[NoBreak]", 
                    StyleBox[
                    RowBox[{}], FontFamily -> "Helvetica", FontSize -> 
                    Smaller], "\[InvisibleSpace]", "\[ThickSpace]", 
                    "\[InvisibleSpace]", 
                    StyleBox[
                    
                    RowBox[{"\"m\"", "\[InvisibleSpace]", "\"/\"", 
                    "\[InvisibleSpace]", 
                    SuperscriptBox["\"s\"", "2"]}], FontFamily -> "Helvetica",
                     FontSize -> Smaller]}], Identity], #& , SyntaxForm -> 
                    Dot], "  ", 
                    StyleBox[
                    
                    RowBox[{"\"(\"", "\[NoBreak]", 
                    "\"meters per second squared\"", "\[NoBreak]", 
                    "\")\""}], {
                    FontFamily -> "Helvetica", FontSize -> Smaller, 
                    GrayLevel[0.6], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}, StripOnInput -> False]}], "Unit", SyntaxForm -> Dot], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0, ZeroWidthTimes -> False]}, "RowDefault"], LineIndent -> 
                    0]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                   BaselinePosition -> 1, DefaultBaseStyle -> "Column", 
                   GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                  "Column"]}}, 
               GridBoxAlignment -> {
                "Columns" -> {Left, Left}, "Rows" -> {{Baseline}}}, 
               AutoDelete -> False, 
               GridBoxBackground -> {"Columns" -> {None, None}}, 
               GridBoxFrame -> {"Columns" -> {{True}}, "Rows" -> {{True}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {"Columns" -> {{1.5}, 2}, "Rows" -> {{1}}}, 
               FrameStyle -> GrayLevel[0.84], BaselinePosition -> Automatic, 
               AllowScriptLevelChange -> False], "Grid"], 
             LineSpacing -> {0.9, 0, 1.5}, LineIndent -> 0, StripOnInput -> 
             False], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {
              FontFamily -> "Times", 
               "Graphics", $CellContext`GraphicsBoxOptionsDefaultAxesStyle -> 
               Directive[
                 GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], 
                 FontOpacity -> 1, 
                 "GraphicsAxes"], \
$CellContext`GraphicsBoxOptionsDefaultTicksStyle -> 
               Directive[
                FontFamily -> "Times", FontSize -> 10, 
                 "GraphicsTicks"], \
$CellContext`GraphicsBoxOptionsDefaultFrameStyle -> Directive[
                 GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], 
                 FontOpacity -> 1, 
                 "GraphicsFrame"], \
$CellContext`GraphicsBoxOptionsDefaultFrameTicksStyle -> 
               Directive[
                FontFamily -> "Times", FontSize -> 10, 
                 "GraphicsFrameTicks"]}}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          CellSize -> {550, Automatic}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,numberdata,\
quantitydata"}]}], 
     XMLElement["states", {"count" -> "2"}, {
       XMLElement[
       "state", {
        "name" -> "More units", "input" -> "Result__More units"}, {}], 
       XMLElement[
       "state", {
        "name" -> "Step-by-step solution", "input" -> 
         "Result__Step-by-step solution"}, {}]}]}], Typeset`pod5$$ = 
   XMLElement[
   "pod", {"title" -> "Schematic", "scanner" -> "Formula", "id" -> 
     "Schematic", "position" -> "500", "error" -> "false", "numsubpods" -> 
     "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            GraphicsBox[{{
               GrayLevel[
                NCache[
                 Rational[16, 17], 0.9411764705882353]], 
               PolygonBox[
                NCache[{{0, 0}, {
                   Cos[Rational[3, 20] Pi], 
                   Sin[Rational[3, 20] Pi]}, {
                   Cos[Rational[3, 20] Pi], 0}}, {{0, 0}, {0.8910065241883679,
                   0.45399049973954675`}, {0.8910065241883679, 0}}]]}, {{
                Dashing[{Small, Small}], 
                Directive[
                 CapForm["Butt"], 
                 AbsoluteThickness[1], 
                 GrayLevel[0.5]], 
                CircleBox[{0, 0}, 
                 Offset[80], 
                 
                 NCache[{0, Rational[3, 20] Pi}, {
                  0, 0.47123889803846897`}]]}, {{{
                  Directive[
                   CapForm["Butt"], 
                   AbsoluteThickness[2], 
                   GrayLevel[0.5], 
                   AbsoluteThickness[1]], 
                  LineBox[{{0, 0}, 
                    Offset[{80., 0.}, {0., 0.}]}]}, {}}}, {{{
                  Directive[
                   CapForm["Butt"], 
                   AbsoluteThickness[2], 
                   GrayLevel[0.5], 
                   AbsoluteThickness[1]], 
                  LineBox[{{0, 0}, 
                    
                    Offset[{71.28052193506943, 36.31923997916374}, {0., 
                    0.}]}]}, {}}}, 
               InsetBox[
                FormBox["\"\[Theta]\"", TraditionalForm], 
                Offset[{56.00850741490616, 13.44645295810015}, {0., 0.}], {0, 
                0}, BaseStyle -> {FontSize -> 14, 
                  GrayLevel[0.3]}]}, {
               GrayLevel[0.78], 
               GeometricTransformationBox[
                DiskBox[
                 Offset[{0, 1}, {0.65, 0.07}], 0.07], {{{
                 0.8910065241883679, -0.45399049973954675`}, {
                 0.45399049973954675`, 0.8910065241883679}}, {0, 0}}]}, {{{
                 Directive[
                  CapForm["Butt"], 
                  AbsoluteThickness[2], 
                  GrayLevel[0.5]], 
                 LineBox[{{0, 0}, {0.8910065241883679, 
                   0.45399049973954675`}}]}, {}}}, {{
                Arrowheads[Small], 
                Directive[
                 CapForm["Butt"], 
                 AbsoluteThickness[1], 
                 GrayLevel[0.5]], 
                
                ArrowBox[{{0.39590379662864833`, 0.2802858965681682}, {
                 0.21770249179097473`, 0.18948779662025886`}}]}, 
               InsetBox[
                FormBox[
                 StyleBox["\"a\"", Italic, StripOnInput -> False], 
                 TraditionalForm], 
                
                Offset[{-8.910065241883679, -4.539904997395467}, {
                 0.21770249179097473`, 0.18948779662025886`}], {
                0.8910065241883679, 0.4539904997395467}, 
                BaseStyle -> {FontSize -> 14, 
                  GrayLevel[0.3]}]}, {
               Arrowheads[Small], {
                Directive[
                 CapForm["Butt"], 
                 AbsoluteThickness[1], 
                 GrayLevel[0.5]], 
                ArrowBox[CompressedData["
1:eJwVjn1Q03Ucx4cQijER8KZeI04lzlCTYaYO7B0oIFpi28hAeZBgmRraCsXL
UBNPxCfgCM5hPN4xTeSIwHzC3ML5kDIT4vfwHSP6fVAYnHUjOKEzoj9e97rX
f6956bs1mVNkMtmySf53wzdH/AafElY7fvfeGMAhf66pK3KyM5bKIkrDOSxf
e/Uf3RNCeZpJxyVysOjDSoL6CNdZz/iMHA5179p+bJQIBdW7O9SlHHq3nTky
1ksg7bS8D5s5KPc0zZ3oIeQu2ftD5mMOLldLtbmbUCe1e6X9xcHorlkXyQjx
WVWh0TN4qOzZyOUJt5sCO/wW82CuNTdzfiN8It9cYY3jEXxJ7qZ6THhwWReZ
8jGPgYsb40zthFJZ4qdcHg+PRlM3u08o0Xt0La3hkTNH8LJZCZv3HFVl/sRj
4fiNVw9bCI5U68psO4/OX98xuFoJFReMpuQxHlcepaQuuEo4EDYUoVQISG9T
xMxqJig39V9rCBMQa9SfuN1A8M5f/NQvXoDpYNTZFRcIm6YPF8TsFJBVcdKx
o3byT3r789hjAir3edtSvyUE9U39zL9WgK89U1KUEWrU+sTzNwUo8nzOFhYS
LN+3vuQhCuiJiTM8PE7483y/NmhEQILLd/Th14SVdenBU2eKULUpG4u/JBQW
GTK+CxGx6Kg1VPkFIemMbvzlaBGzY6fLd+4ivNj3kfB6qohfrNmOgxkEDEQ+
d9svwmwIWLNlKyHi2RRtcbGI5NmF3S+0hDa1ZpC/KOKu6r5u+wbCv6Pldzva
RGQ5F+rKowjRc958fqhbxMwrW0+UrSL4rf3qlGNExIH6LQ3JoQR3tU+NU84w
bZc2+1kwYdhsT6h9jcH2yHhufQDhrVcSbZ6rGZzqWjL4E9yc58L9dQzNpwd8
t3sRllUVtFt3MHzwx5OhkAkJBSkuS+BhBjOTRd34W0LphpYkZRlD/K39vUqn
hKLkfse1egbNirTK93ok7C0ZrRwzMzy4lauN75RQVW0Z6epiqOpdL8y/JyFp
/A7eH2Q45tnpc69VglUT3qefYJgX2CRENUkozg1JUPjbccg1rCyqk+DeUu6Z
EmxH/hvyn5uNEoaW1+dErLLjP5XoqTQ=
                 "]]}, 
               InsetBox[
                FormBox["\"\[Omega]\"", TraditionalForm], 
                NCache[
                 
                 Offset[{(-6) Sin[27 Degree + Rational[3, 20] Pi], 6 
                   Cos[27 Degree + Rational[3, 20] Pi]}, {0.6126350221251906, 
                  0.4409934214062037}], 
                 
                 Offset[{-4.854101966249685, 3.526711513754839}, {
                  0.6126350221251906, 0.4409934214062037}]], 
                NCache[{
                  Sin[27 Degree + Rational[3, 20] Pi], -
                  Cos[27 Degree + Rational[3, 20] Pi]}, {
                 0.8090169943749475, -0.5877852522924731}], 
                BaseStyle -> {FontSize -> 14, 
                  GrayLevel[0.3]}]}, {{{
                 Directive[
                  CapForm["Butt"], 
                  AbsoluteThickness[2], 
                  GrayLevel[0.5]], 
                 
                 LineBox[{{0.5473749057406708, 0.35746428152389115`}, {
                  0.6173749057406708, 0.35746428152389115`}}]}, 
                InsetBox[
                 FormBox["r", TraditionalForm], 
                 
                 Offset[{0., 10.}, {0.5823749057406709, 
                  0.33546428152389113`}], {0., -1.}, 
                 BaseStyle -> {FontSize -> 14, 
                   GrayLevel[0.3]}]}}}, ImageSize -> {300.}], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {
              FontFamily -> "Times", 
               "Graphics", $CellContext`GraphicsBoxOptionsDefaultAxesStyle -> 
               Directive[
                 GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], 
                 FontOpacity -> 1, 
                 "GraphicsAxes"], \
$CellContext`GraphicsBoxOptionsDefaultTicksStyle -> 
               Directive[
                FontFamily -> "Times", FontSize -> 10, 
                 "GraphicsTicks"], \
$CellContext`GraphicsBoxOptionsDefaultFrameStyle -> Directive[
                 GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], 
                 FontOpacity -> 1, 
                 "GraphicsFrame"], \
$CellContext`GraphicsBoxOptionsDefaultFrameTicksStyle -> 
               Directive[
                FontFamily -> "Times", FontSize -> 10, 
                 "GraphicsFrameTicks"]}}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          CellSize -> {550, Automatic}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement["dataformats", {}, {"computabledata,formatteddata"}]}]}], 
   Typeset`pod6$$ = XMLElement[
   "pod", {"title" -> "Acceleration vs. slope angle", "scanner" -> "Formula", 
     "id" -> "AccelerationVs.SlopeAngle", "position" -> "600", "error" -> 
     "false", "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            TemplateBox[{
              GraphicsBox[{{{}, {}, {
                  Hue[0.67, 0.6, 0.6], 
                  Directive[
                   RGBColor[0.24720000000000014`, 0.24, 0.6], 
                   AbsoluteThickness[1]], 
                  LineBox[CompressedData["
1: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
UYH1rCofhHLYhv/7PxQypsc=
                   "]]}}}, {
               AspectRatio -> NCache[GoldenRatio^(-1), 0.6180339887498948], 
                AxesOrigin -> {0, 0}, BaseStyle -> {CellBaseline -> Baseline},
                 Frame -> True, FrameLabel -> {{
                   FormBox[
                    StyleBox[
                    TemplateBox[{"\"acceleration\"", "\"  \"", 
                    StyleBox[
                    RowBox[{"\"(\"", "\[NoBreak]", 
                    StyleBox[
                    TagBox[
                    TagBox[
                    RowBox[{
                    StyleBox[
                    
                    RowBox[{"\"m\"", "\[InvisibleSpace]", "\"/\"", 
                    "\[InvisibleSpace]", 
                    SuperscriptBox["\"s\"", "2"]}], FontFamily -> "Helvetica",
                     FontSize -> Smaller]}], Identity], "UnitOnly", 
                    SyntaxForm -> Dot], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0, ZeroWidthTimes -> False], "\[NoBreak]", "\")\""}], {
                    FontFamily -> "Verdana", FontSize -> 10, 
                    GrayLevel[0.5], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}, StripOnInput -> False]}, "RowDefault"], LineIndent -> 
                    0], TraditionalForm], None}, {
                   FormBox[
                    StyleBox[
                    TemplateBox[{"\"slope angle\"", "\"  \"", 
                    StyleBox[
                    RowBox[{"\"(\"", "\[NoBreak]", 
                    StyleBox[
                    TagBox[
                    RowBox[{
                    StyleBox[
                    "\"radians\"", {
                    FontFamily -> "Helvetica", FontSize -> Smaller, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}, StripOnInput -> False]}], Identity], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0, ZeroWidthTimes -> False], "\[NoBreak]", "\")\""}], {
                    FontFamily -> "Verdana", FontSize -> 10, 
                    GrayLevel[0.5], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}, StripOnInput -> False]}, "RowDefault"], LineIndent -> 
                    0], TraditionalForm], None}}, FrameTicksStyle -> 
                Directive[FontFamily -> "Times", FontSize -> 10], ImageSize -> 
                300., LabelStyle -> {FontSize -> 10, FontFamily -> "Verdana"},
                 Method -> {}, PlotRange -> 
                NCache[{{0, 90 Degree}, {0., 4.903324999999997}}, {{
                   0, 1.5707963267948966`}, {0., 4.903324999999997}}], 
                PlotRangeClipping -> True, PlotRangePadding -> {
                  Scaled[0.02], 
                  Scaled[0.05]}, Prolog -> {
                  AbsoluteThickness[1], 
                  Directive[
                   RGBColor[0.6, 0.24, 0.4428931686004542], 
                   AbsoluteThickness[1]], 
                  LineBox[
                   NCache[{
                    Scaled[{0, -1}, {Rational[3, 20] Pi, 0}], 
                    Scaled[{0, 1}, {Rational[3, 20] Pi, 0}]}, {
                    Scaled[{0, -1}, {0.47123889803846897`, 0}], 
                    Scaled[{0, 1}, {0.47123889803846897`, 0}]}]], {
                   Opacity[0], 
                   TagBox[
                    RectangleBox[
                    Scaled[{0, 0}], 
                    Scaled[{1, 1}]], Annotation[#, "Plot", "Frame"]& ]}}, 
                TicksStyle -> 
                Directive[FontFamily -> "Times", FontSize -> 10]}], 
              TagBox[
               GridBox[{{
                  GraphicsBox[{
                    Directive[
                    RGBColor[0.24720000000000014`, 0.24, 0.6], 
                    AbsoluteThickness[1]], {
                    AbsoluteThickness[2], 
                    LineBox[{{0, 0}, {1, 0}}]}}, ImageSize -> NCache[
                    Rational[143, 10], 14.3], 
                   BaselinePosition -> (Center -> Center)], 
                  StyleBox["a", {FontFamily -> "Verdana", FontSize -> 10, 
                    GrayLevel[0.5], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}, StripOnInput -> False]}, {
                  GraphicsBox[{
                    Directive[
                    RGBColor[0.6, 0.24, 0.4428931686004542], 
                    AbsoluteThickness[1]], {
                    AbsoluteThickness[2], 
                    LineBox[{{0, 0}, {1, 0}}]}}, ImageSize -> NCache[
                    Rational[143, 10], 14.3], 
                   BaselinePosition -> (Center -> Center)], 
                  StyleBox[
                  "\[Theta]", {FontFamily -> "Verdana", FontSize -> 10, 
                    GrayLevel[0.5], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}, StripOnInput -> False]}}, 
                GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                False, GridBoxItemSize -> {
                 "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                GridBoxSpacings -> {"Columns" -> {{0.3}}, "Rows" -> {{0.3}}}],
                "Grid"]}, "Labeled", DisplayFunction -> (FormBox[
               GridBox[{{
                  TagBox[
                   ItemBox[
                    PaneBox[
                    TagBox[#, "SkipImageSizeLevel"], 
                    Alignment -> {Center, Baseline}, BaselinePosition -> 
                    Baseline], DefaultBaseStyle -> "Labeled"], 
                   "SkipImageSizeLevel"], 
                  ItemBox[#2, DefaultBaseStyle -> "LabeledLabel"]}}, 
                GridBoxAlignment -> {
                 "Columns" -> {{Center}}, "Rows" -> {{Center}}}, AutoDelete -> 
                False, GridBoxItemSize -> {
                 "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                BaselinePosition -> {1, 1}], TraditionalForm]& ), 
             InterpretationFunction -> (RowBox[{
                StyleBox[
                "Labeled", FontFamily -> "Bitstream Vera Sans", 
                 FontSize -> -1 + Inherited], "[", 
                RowBox[{#, ",", #2, ",", 
                  StyleBox[
                  "Right", FontFamily -> "Bitstream Vera Sans", 
                   FontSize -> -1 + Inherited]}], "]"}]& )], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {
              FontFamily -> "Times", 
               "Graphics", $CellContext`GraphicsBoxOptionsDefaultAxesStyle -> 
               Directive[
                 GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], 
                 FontOpacity -> 1, 
                 "GraphicsAxes"], \
$CellContext`GraphicsBoxOptionsDefaultTicksStyle -> 
               Directive[
                FontFamily -> "Times", FontSize -> 10, 
                 "GraphicsTicks"], \
$CellContext`GraphicsBoxOptionsDefaultFrameStyle -> Directive[
                 GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], 
                 FontOpacity -> 1, 
                 "GraphicsFrame"], \
$CellContext`GraphicsBoxOptionsDefaultFrameTicksStyle -> 
               Directive[
                FontFamily -> "Times", FontSize -> 10, 
                 "GraphicsFrameTicks"]}}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          CellSize -> {550, Automatic}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement["dataformats", {}, {"computabledata,formatteddata"}]}]}], 
   Typeset`pod7$$, Typeset`pod8$$, Typeset`pod9$$, Typeset`pod10$$, 
   Typeset`pod11$$, Typeset`pod12$$, Typeset`pod13$$, Typeset`pod14$$, 
   Typeset`pod15$$, Typeset`pod16$$, Typeset`pod17$$, Typeset`pod18$$, 
   Typeset`pod19$$, Typeset`pod20$$, Typeset`pod21$$, Typeset`pod22$$, 
   Typeset`pod23$$, Typeset`pod24$$, Typeset`pod25$$, Typeset`pod26$$, 
   Typeset`pod27$$, Typeset`pod28$$, Typeset`pod29$$, Typeset`pod30$$, 
   Typeset`pod31$$, Typeset`pod32$$, Typeset`pod33$$, Typeset`pod34$$, 
   Typeset`pod35$$, Typeset`pod36$$, Typeset`aux1$$ = {
   True, False, {False}, True}, Typeset`aux2$$ = {True, False, {False}, True},
    Typeset`aux3$$ = {True, False, {False}, True}, Typeset`aux4$$ = {
   True, False, {False}, True}, Typeset`aux5$$ = {True, False, {False}, True},
    Typeset`aux6$$ = {True, False, {False}, True}, Typeset`aux7$$ = {
   True, False, {False}, True}, Typeset`aux8$$ = {True, False, {False}, True},
    Typeset`aux9$$ = {True, False, {False}, True}, Typeset`aux10$$ = {
   True, False, {False}, True}, Typeset`aux11$$ = {
   True, False, {False}, True}, Typeset`aux12$$ = {
   True, False, {False}, True}, Typeset`aux13$$ = {
   True, False, {False}, True}, Typeset`aux14$$ = {
   True, False, {False}, True}, Typeset`aux15$$ = {
   True, False, {False}, True}, Typeset`aux16$$ = {
   True, False, {False}, True}, Typeset`aux17$$ = {
   True, False, {False}, True}, Typeset`aux18$$ = {
   True, False, {False}, True}, Typeset`aux19$$ = {
   True, False, {False}, True}, Typeset`aux20$$ = {
   True, False, {False}, True}, Typeset`aux21$$ = {
   True, False, {False}, True}, Typeset`aux22$$ = {
   True, False, {False}, True}, Typeset`aux23$$ = {
   True, False, {False}, True}, Typeset`aux24$$ = {
   True, False, {False}, True}, Typeset`aux25$$ = {
   True, False, {False}, True}, Typeset`aux26$$ = {
   True, False, {False}, True}, Typeset`aux27$$ = {
   True, False, {False}, True}, Typeset`aux28$$ = {
   True, False, {False}, True}, Typeset`aux29$$ = {
   True, False, {False}, True}, Typeset`aux30$$ = {
   True, False, {False}, True}, Typeset`aux31$$ = {
   True, False, {False}, True}, Typeset`aux32$$ = {
   True, False, {False}, True}, Typeset`aux33$$ = {
   True, False, {False}, True}, Typeset`aux34$$ = {
   True, False, {False}, True}, Typeset`aux35$$ = {
   True, False, {False}, True}, Typeset`aux36$$ = {
   True, False, {False}, True}, Typeset`asyncpods$$ = {}, Typeset`nonpods$$ = {
    XMLElement["assumptions", {"count" -> "10"}, {
      XMLElement[
      "assumption", {
       "type" -> "Clash", "word" -> "inclined plane", "template" -> 
        "Assuming \"${word}\" is ${desc1}. Use as ${desc2} instead", "count" -> 
        "4"}, {
        XMLElement[
        "value", {
         "name" -> "Formula", "desc" -> "a formula", "input" -> 
          "*C.inclined+plane-_*Formula-"}, {}], 
        XMLElement[
        "value", {
         "name" -> "PhysicalSystem", "desc" -> 
          " referring to physical system", "input" -> 
          "*C.inclined+plane-_*PhysicalSystem-"}, {}], 
        XMLElement[
        "value", {
         "name" -> "VisualArts", "desc" -> "a photograph", "input" -> 
          "*C.inclined+plane-_*VisualArts-"}, {}], 
        XMLElement[
        "value", {
         "name" -> "Word", "desc" -> "a word", "input" -> 
          "*C.inclined+plane-_*Word-"}, {}]}], 
      XMLElement[
      "assumption", {
       "type" -> "FormulaSelect", "template" -> 
        "Assuming ${desc1}. Use ${desc2} instead", "count" -> "2"}, {
        XMLElement[
        "value", {
         "name" -> "InclinedPlaneRolling", "desc" -> 
          "round object on inclined plane", "input" -> 
          "FSelect_**InclinedPlaneRolling--"}, {}], 
        XMLElement[
        "value", {
         "name" -> "InclinedPlane", "desc" -> "block on inclined plane", 
          "input" -> "FSelect_**InclinedPlane--"}, {}]}], 
      XMLElement[
      "assumption", {
       "type" -> "FormulaVariable", "desc" -> "slope angle", "current" -> "1",
         "count" -> "1"}, {
        XMLElement[
        "value", {
         "name" -> "InclinedPlaneRolling.theta", "desc" -> "27 \[Degree]", 
          "valid" -> "true", "input" -> 
          "*F.InclinedPlaneRolling.theta-_27+%C2%B0"}, {}]}], 
      XMLElement[
      "assumption", {
       "type" -> "FormulaVariable", "desc" -> "mass", "current" -> "1", 
        "count" -> "1"}, {
        XMLElement[
        "value", {
         "name" -> "InclinedPlaneRolling.m", "desc" -> "1 kg", "valid" -> 
          "true", "input" -> "*F.InclinedPlaneRolling.m-_1+kg"}, {}]}], 
      XMLElement[
      "assumption", {
       "type" -> "FormulaVariable", "desc" -> "radius", "current" -> "1", 
        "count" -> "1"}, {
        XMLElement[
        "value", {
         "name" -> "InclinedPlaneRolling.r", "desc" -> "10 cm", "valid" -> 
          "true", "input" -> "*F.InclinedPlaneRolling.r-_10+cm"}, {}]}], 
      XMLElement[
      "assumption", {
       "type" -> "FormulaVariable", "desc" -> "moment of inertia", "current" -> 
        "1", "count" -> "1"}, {
        XMLElement[
        "value", {
         "name" -> "InclinedPlaneRolling.I", "desc" -> "10 g m^2", "valid" -> 
          "true", "input" -> "*F.InclinedPlaneRolling.I-_10+g+m%5E2"}, {}]}], 
      
      XMLElement[
      "assumption", {
       "type" -> "FormulaVariableOption", "template" -> 
        "Assuming ${desc1}. Use ${desc2} instead", "count" -> "3"}, {
        XMLElement[
        "value", {
         "name" -> "InclinedPlaneRolling.a0", "desc" -> "pure rolling", 
          "input" -> 
          "*FVarOpt-_**InclinedPlaneRolling.a0-.*InclinedPlaneRolling.theta-.*\
InclinedPlaneRolling.m-.*InclinedPlaneRolling.I--"}, {}], 
        XMLElement[
        "value", {
         "name" -> 
          "InclinedPlaneRolling.a1,InclinedPlaneRolling.vi1,\
InclinedPlaneRolling.vf1,InclinedPlaneRolling.t1,InclinedPlaneRolling.d1", 
          "desc" -> "pure rolling, speed, time and distance", "input" -> 
          "*FVarOpt-_**InclinedPlaneRolling.a1-.*InclinedPlaneRolling.vi1-.*\
InclinedPlaneRolling.vf1-.*InclinedPlaneRolling.t1-.*InclinedPlaneRolling.d1-.\
*InclinedPlaneRolling.theta-.*InclinedPlaneRolling.m-.*InclinedPlaneRolling.I-\
-"}, {}], 
        XMLElement[
        "value", {
         "name" -> 
          "InclinedPlaneRolling.a2,InclinedPlaneRolling.mus2,\
InclinedPlaneRolling.muk2,InclinedPlaneRolling.thetacrit2,\
InclinedPlaneRolling.vi2,InclinedPlaneRolling.omegai2", "desc" -> 
          "rolling and sliding", "input" -> 
          "*FVarOpt-_**InclinedPlaneRolling.a2-.*InclinedPlaneRolling.mus2-.*\
InclinedPlaneRolling.muk2-.*InclinedPlaneRolling.thetacrit2-.*\
InclinedPlaneRolling.vi2-.*InclinedPlaneRolling.omegai2-.*\
InclinedPlaneRolling.theta-.*InclinedPlaneRolling.m-.*InclinedPlaneRolling.I--\
"}, {}]}], 
      XMLElement[
      "assumption", {
       "type" -> "FormulaVariableOption", "template" -> 
        "Assuming ${desc1}. Use ${desc2} instead", "count" -> "2"}, {
        XMLElement[
        "value", {
         "name" -> "InclinedPlaneRolling.theta", "desc" -> "slope angle", 
          "input" -> 
          "*FVarOpt-_**InclinedPlaneRolling.theta-.*InclinedPlaneRolling.a0-.*\
InclinedPlaneRolling.m-.*InclinedPlaneRolling.I--"}, {}], 
        XMLElement[
        "value", {
         "name" -> "InclinedPlaneRolling.s", "desc" -> "slope", "input" -> 
          "*FVarOpt-_**InclinedPlaneRolling.s-.*InclinedPlaneRolling.a0-.*\
InclinedPlaneRolling.m-.*InclinedPlaneRolling.I--"}, {}]}], 
      XMLElement[
      "assumption", {
       "type" -> "FormulaVariableOption", "template" -> 
        "Assuming ${desc1}. Use ${desc2} instead", "count" -> "2"}, {
        XMLElement[
        "value", {
         "name" -> "InclinedPlaneRolling.m,InclinedPlaneRolling.I", "desc" -> 
          "mass and moment of inertia", "input" -> 
          "*FVarOpt-_**InclinedPlaneRolling.m-.*InclinedPlaneRolling.I-.*\
InclinedPlaneRolling.a0-.*InclinedPlaneRolling.theta--"}, {}], 
        XMLElement[
        "value", {
         "name" -> "InclinedPlaneRolling.sigma", "desc" -> "shape factor", 
          "input" -> 
          "*FVarOpt-_**InclinedPlaneRolling.sigma-.*InclinedPlaneRolling.a0-.*\
InclinedPlaneRolling.theta--"}, {}]}], 
      XMLElement[
      "assumption", {
       "type" -> "FormulaVariableInclude", "template" -> 
        "Also include ${desc1}", "count" -> "1"}, {
        XMLElement[
        "value", {
         "name" -> "InclinedPlaneRolling.g", "desc" -> 
          "gravitational acceleration", "input" -> 
          "*FVarOpt-_**InclinedPlaneRolling.g-.*InclinedPlaneRolling.a0-.*\
InclinedPlaneRolling.theta-.*InclinedPlaneRolling.m-.*InclinedPlaneRolling.I--\
"}, {}]}]}]}, Typeset`initdone$$ = True, 
   Typeset`queryinfo$$ = {{
    "success" -> "true", "error" -> "false", "numpods" -> "6", "datatypes" -> 
     "Formula", "timedout" -> "", "timedoutpods" -> "", "timing" -> "1.737", 
     "parsetiming" -> "0.579", "parsetimedout" -> "false", "recalculate" -> 
     "http://www5a.wolframalpha.com/api/v2/recalc.jsp?id=\
MSPa9171c1bdd6g53gfc77g00004h996333fabf7f905070578756676495053", "id" -> 
     "MSPa9181c1bdd6g53gfc77g000015ih477bhf5h7ga5", "host" -> 
     "http://www5a.wolframalpha.com", "server" -> "38", "related" -> 
     "http://www5a.wolframalpha.com/api/v2/relatedQueries.jsp?id=\
MSPa9191c1bdd6g53gfc77g00005e4c7acigf6i768b5070578756676495053", "version" -> 
     "2.6"}, {"success" -> "true", "error" -> "false", "numpods" -> "0", 
     "datatypes" -> "Formula", "timedout" -> "", "timedoutpods" -> "", 
     "timing" -> "0.506", "parsetiming" -> "0.", "parsetimedout" -> "false", 
     "recalculate" -> "", "id" -> "", "host" -> 
     "http://www5a.wolframalpha.com", "server" -> "48", "related" -> "", 
     "version" -> "2.6"}}, Typeset`sessioninfo$$ = {
   "TimeZone" -> -5., 
    "Date" -> {2017, 6, 28, 18, 18, 33.315949`8.275227168755107}, "Line" -> 
    719, "SessionID" -> 30729157247289955091}, Typeset`showpods$$ = {1, 2, 3, 
   4, 5, 6}, Typeset`failedpods$$ = {7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 
   18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 
   36}, Typeset`chosen$$ = {}, Typeset`open$$ = False, Typeset`newq$$ = 
   "inclined plane"}, 
   DynamicBox[ToBoxes[
     AlphaIntegration`FormatAlphaResults[
      Dynamic[{
       2, {Typeset`pod1$$, Typeset`pod2$$, Typeset`pod3$$, Typeset`pod4$$, 
         Typeset`pod5$$, Typeset`pod6$$, Typeset`pod7$$, Typeset`pod8$$, 
         Typeset`pod9$$, Typeset`pod10$$, Typeset`pod11$$, Typeset`pod12$$, 
         Typeset`pod13$$, Typeset`pod14$$, Typeset`pod15$$, Typeset`pod16$$, 
         Typeset`pod17$$, Typeset`pod18$$, Typeset`pod19$$, Typeset`pod20$$, 
         Typeset`pod21$$, Typeset`pod22$$, Typeset`pod23$$, Typeset`pod24$$, 
         Typeset`pod25$$, Typeset`pod26$$, Typeset`pod27$$, Typeset`pod28$$, 
         Typeset`pod29$$, Typeset`pod30$$, Typeset`pod31$$, Typeset`pod32$$, 
         Typeset`pod33$$, Typeset`pod34$$, Typeset`pod35$$, 
         Typeset`pod36$$}, {
        Typeset`aux1$$, Typeset`aux2$$, Typeset`aux3$$, Typeset`aux4$$, 
         Typeset`aux5$$, Typeset`aux6$$, Typeset`aux7$$, Typeset`aux8$$, 
         Typeset`aux9$$, Typeset`aux10$$, Typeset`aux11$$, Typeset`aux12$$, 
         Typeset`aux13$$, Typeset`aux14$$, Typeset`aux15$$, Typeset`aux16$$, 
         Typeset`aux17$$, Typeset`aux18$$, Typeset`aux19$$, Typeset`aux20$$, 
         Typeset`aux21$$, Typeset`aux22$$, Typeset`aux23$$, Typeset`aux24$$, 
         Typeset`aux25$$, Typeset`aux26$$, Typeset`aux27$$, Typeset`aux28$$, 
         Typeset`aux29$$, Typeset`aux30$$, Typeset`aux31$$, Typeset`aux32$$, 
         Typeset`aux33$$, Typeset`aux34$$, Typeset`aux35$$, Typeset`aux36$$}, 
        Typeset`chosen$$, Typeset`open$$, Typeset`elements$$, Typeset`q$$, 
        Typeset`opts$$, Typeset`nonpods$$, Typeset`queryinfo$$, 
        Typeset`sessioninfo$$, Typeset`showpods$$, Typeset`failedpods$$, 
        Typeset`newq$$}]], StandardForm],
    ImageSizeCache->{741., {708., 714.}},
    TrackedSymbols:>{Typeset`showpods$$, Typeset`failedpods$$}],
   DynamicModuleValues:>{},
   Initialization:>If[
     Not[Typeset`initdone$$], Null; AlphaIntegration`DoAsyncInitialization[
       Hold[{
        2, {Typeset`pod1$$, Typeset`pod2$$, Typeset`pod3$$, Typeset`pod4$$, 
          Typeset`pod5$$, Typeset`pod6$$, Typeset`pod7$$, Typeset`pod8$$, 
          Typeset`pod9$$, Typeset`pod10$$, Typeset`pod11$$, Typeset`pod12$$, 
          Typeset`pod13$$, Typeset`pod14$$, Typeset`pod15$$, Typeset`pod16$$, 
          Typeset`pod17$$, Typeset`pod18$$, Typeset`pod19$$, Typeset`pod20$$, 
          Typeset`pod21$$, Typeset`pod22$$, Typeset`pod23$$, Typeset`pod24$$, 
          Typeset`pod25$$, Typeset`pod26$$, Typeset`pod27$$, Typeset`pod28$$, 
          Typeset`pod29$$, Typeset`pod30$$, Typeset`pod31$$, Typeset`pod32$$, 
          Typeset`pod33$$, Typeset`pod34$$, Typeset`pod35$$, 
          Typeset`pod36$$}, {
         Typeset`aux1$$, Typeset`aux2$$, Typeset`aux3$$, Typeset`aux4$$, 
          Typeset`aux5$$, Typeset`aux6$$, Typeset`aux7$$, Typeset`aux8$$, 
          Typeset`aux9$$, Typeset`aux10$$, Typeset`aux11$$, Typeset`aux12$$, 
          Typeset`aux13$$, Typeset`aux14$$, Typeset`aux15$$, Typeset`aux16$$, 
          Typeset`aux17$$, Typeset`aux18$$, Typeset`aux19$$, Typeset`aux20$$, 
          Typeset`aux21$$, Typeset`aux22$$, Typeset`aux23$$, Typeset`aux24$$, 
          Typeset`aux25$$, Typeset`aux26$$, Typeset`aux27$$, Typeset`aux28$$, 
          Typeset`aux29$$, Typeset`aux30$$, Typeset`aux31$$, Typeset`aux32$$, 
          Typeset`aux33$$, Typeset`aux34$$, Typeset`aux35$$, Typeset`aux36$$},
          Typeset`chosen$$, Typeset`open$$, Typeset`elements$$, Typeset`q$$, 
         Typeset`opts$$, Typeset`nonpods$$, Typeset`queryinfo$$, 
         Typeset`sessioninfo$$, Typeset`showpods$$, Typeset`failedpods$$, 
         Typeset`newq$$, 
         "http://www5a.wolframalpha.com/api/v2/recalc.jsp?id=\
MSPa9171c1bdd6g53gfc77g00004h996333fabf7f905070578756676495053", 
         Typeset`asyncpods$$}]]; Typeset`asyncpods$$ = {}; 
     Typeset`initdone$$ = True],
   SynchronousInitialization->False],
  BaseStyle->{Deployed -> True},
  DeleteWithContents->True,
  Editable->False,
  SelectWithContents->True]], "Print", "WolframAlphaFullOutput",
 CellChangeTimes->{
  3.7076807246475573`*^9},ExpressionUUID->"d6c801ec-bce0-4d2e-b0c1-\
e95337e69351"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"WolframAlpha", "[", 
  RowBox[{"\"\<inclined plane\>\"", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"\"\<Schematic\>\"", ",", "1"}], "}"}], ",", 
     "\"\<Content\>\""}], "}"}]}], "]"}]], "Input",ExpressionUUID->"e35bd45f-\
4b45-4003-aead-f839122075bc"],

Cell[BoxData[
 StyleBox[
  FormBox[
   GraphicsBox[{
     {GrayLevel[
       NCache[
        Rational[16, 17], 0.9411764705882353]], 
      PolygonBox[
       NCache[{{0, 0}, {Cos[Rational[3, 20] Pi], Sin[Rational[3, 20] Pi]}, {
         Cos[Rational[3, 20] Pi], 0}}, {{0, 0}, {0.8910065241883679, 
         0.45399049973954675`}, {0.8910065241883679, 0}}]]}, {
      {GrayLevel[0.5], AbsoluteThickness[1], Dashing[{Small, Small}], CapForm[
       "Butt"], 
       CircleBox[{0, 0}, Offset[80], 
        NCache[{0, Rational[3, 20] Pi}, {0, 0.47123889803846897`}]]}, {
       {GrayLevel[0.5], AbsoluteThickness[1], CapForm["Butt"], 
        LineBox[{{0, 0}, Offset[{80., 0.}, {0., 0.}]}]}, {}}, {
       {GrayLevel[0.5], AbsoluteThickness[1], CapForm["Butt"], 
        LineBox[{{0, 0}, 
          Offset[{71.28052193506943, 36.31923997916374}, {0., 0.}]}]}, {}}, 
      InsetBox["\<\"\[Theta]\"\>", 
       Offset[{56.00850741490616, 13.44645295810015}, {0., 0.}], {0, 0},
       BaseStyle->{FontSize -> 14, 
         GrayLevel[0.3]}]}, 
     {GrayLevel[0.78], 
      GeometricTransformationBox[
       DiskBox[Offset[{0, 1}, {0.65, 0.07}], 0.07], {{{
        0.8910065241883679, -0.45399049973954675`}, {0.45399049973954675`, 
        0.8910065241883679}}, {0, 0}}]}, {
      {GrayLevel[0.5], AbsoluteThickness[2], CapForm["Butt"], 
       LineBox[{{0, 0}, {0.8910065241883679, 0.45399049973954675`}}]}, {}}, {
      {GrayLevel[0.5], AbsoluteThickness[1], CapForm["Butt"], Arrowheads[
       Small], ArrowBox[{{0.39590379662864833`, 0.2802858965681682}, {
        0.21770249179097473`, 0.18948779662025886`}}]}, InsetBox[
       StyleBox["\<\"a\"\>",
        StripOnInput->False,
        FontSlant->Italic], 
       Offset[{-8.910065241883679, -4.539904997395467}, \
{0.21770249179097473, 0.18948779662025886}], {0.8910065241883679, 0.4539904997395467},
       
       BaseStyle->{FontSize -> 14, 
         GrayLevel[0.3]}]}, 
     {Arrowheads[Small], 
      {GrayLevel[0.5], AbsoluteThickness[1], CapForm["Butt"], 
       ArrowBox[CompressedData["
1:eJwVjn1Q03Ucx4cQijER8KZeI04lzlCTYaYO7B0oIFpi28hAeZBgmRraCsXL
UBNPxCfgCM5hPN4xTeSIwHzC3ML5kDIT4vfwHSP6fVAYnHUjOKEzoj9e97rX
f6956bs1mVNkMtmySf53wzdH/AafElY7fvfeGMAhf66pK3KyM5bKIkrDOSxf
e/Uf3RNCeZpJxyVysOjDSoL6CNdZz/iMHA5179p+bJQIBdW7O9SlHHq3nTky
1ksg7bS8D5s5KPc0zZ3oIeQu2ftD5mMOLldLtbmbUCe1e6X9xcHorlkXyQjx
WVWh0TN4qOzZyOUJt5sCO/wW82CuNTdzfiN8It9cYY3jEXxJ7qZ6THhwWReZ
8jGPgYsb40zthFJZ4qdcHg+PRlM3u08o0Xt0La3hkTNH8LJZCZv3HFVl/sRj
4fiNVw9bCI5U68psO4/OX98xuFoJFReMpuQxHlcepaQuuEo4EDYUoVQISG9T
xMxqJig39V9rCBMQa9SfuN1A8M5f/NQvXoDpYNTZFRcIm6YPF8TsFJBVcdKx
o3byT3r789hjAir3edtSvyUE9U39zL9WgK89U1KUEWrU+sTzNwUo8nzOFhYS
LN+3vuQhCuiJiTM8PE7483y/NmhEQILLd/Th14SVdenBU2eKULUpG4u/JBQW
GTK+CxGx6Kg1VPkFIemMbvzlaBGzY6fLd+4ivNj3kfB6qohfrNmOgxkEDEQ+
d9svwmwIWLNlKyHi2RRtcbGI5NmF3S+0hDa1ZpC/KOKu6r5u+wbCv6Pldzva
RGQ5F+rKowjRc958fqhbxMwrW0+UrSL4rf3qlGNExIH6LQ3JoQR3tU+NU84w
bZc2+1kwYdhsT6h9jcH2yHhufQDhrVcSbZ6rGZzqWjL4E9yc58L9dQzNpwd8
t3sRllUVtFt3MHzwx5OhkAkJBSkuS+BhBjOTRd34W0LphpYkZRlD/K39vUqn
hKLkfse1egbNirTK93ok7C0ZrRwzMzy4lauN75RQVW0Z6epiqOpdL8y/JyFp
/A7eH2Q45tnpc69VglUT3qefYJgX2CRENUkozg1JUPjbccg1rCyqk+DeUu6Z
EmxH/hvyn5uNEoaW1+dErLLjP5XoqTQ=
        "]]}, 
      InsetBox["\<\"\[Omega]\"\>", NCache[
       Offset[{(-6) Sin[27 Degree + Rational[3, 20] Pi], 6 
          Cos[27 Degree + Rational[3, 20] Pi]}, {0.6126350221251906, 
         0.4409934214062037}], 
        Offset[{-4.854101966249685, 3.526711513754839}, {0.6126350221251906, 
         0.4409934214062037}]], 
       NCache[{Sin[27 Degree + Rational[3, 20] Pi], -
         Cos[27 Degree + Rational[3, 20] Pi]}, {
        0.8090169943749475, -0.5877852522924731}],
       BaseStyle->{FontSize -> 14, 
         GrayLevel[0.3]}]}, {
      {GrayLevel[0.5], AbsoluteThickness[2], CapForm["Butt"], 
       LineBox[{{0.5473749057406708, 0.35746428152389115`}, {
        0.6173749057406708, 0.35746428152389115`}}]}, 
      InsetBox["r", 
       Offset[{0., 10.}, {0.5823749057406709, 0.33546428152389113}], {0., -1.},
       
       BaseStyle->{FontSize -> 14, 
         GrayLevel[0.3]}]}},
    ImageSize->{300.}],
   TraditionalForm], "Output",
  CellSize->{550, Automatic},
  ScriptLevel->0,
  RenderingOptions->{"3DRenderingMethod"->"BSPTreeOrDepthBuffer"},
  FontFamily->"Times",
  FontSize->14,
  Background->None,
  GraphicsBoxOptions->{
  DefaultBaseStyle->{
   FontFamily -> "Times", 
    "Graphics", $CellContext`GraphicsBoxOptionsDefaultAxesStyle -> Directive[
      GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 1, 
      "GraphicsAxes"], $CellContext`GraphicsBoxOptionsDefaultTicksStyle -> 
    Directive[
     FontFamily -> "Times", FontSize -> 10, 
      "GraphicsTicks"], $CellContext`GraphicsBoxOptionsDefaultFrameStyle -> 
    Directive[
      GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 1, 
      "GraphicsFrame"], $CellContext`GraphicsBoxOptionsDefaultFrameTicksStyle -> 
    Directive[FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"]}},
  Graphics3DBoxOptions->{
  DefaultBaseStyle->{FontFamily -> "Times", "Graphics3D"}}]], "Output",
 CellChangeTimes->{
  3.707680753784595*^9},ExpressionUUID->"9f3f1a97-374c-461f-93a0-\
f94bc26d1037"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"WolframAlpha", "[", 
  RowBox[{"\"\<inclined plane\>\"", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"\"\<Schematic\>\"", ",", "1"}], "}"}], ",", 
     "\"\<ComputableData\>\""}], "}"}]}], "]"}]], "Input",ExpressionUUID->\
"82601856-75bb-4b06-8cc0-ee40fd9dc262"],

Cell[BoxData[
 RowBox[{"Missing", "[", "\<\"NotAvailable\"\>", "]"}]], "Output",
 CellChangeTimes->{
  3.706915011842692*^9},ExpressionUUID->"364c06e7-da5c-406c-917b-\
67d5538764cd"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"FormulaData", "[", 
  RowBox[{"{", 
   RowBox[{
   "\"\<InclinedPlaneRolling\>\"", ",", "\"\<PureRolling\>\"", ",", 
    "\"\<SlopeAngle\>\"", ",", "\"\<MomentOfInertia\>\""}], "}"}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.706914396029215*^9, 
  3.7069143960304213`*^9}},ExpressionUUID->"1af7c7bc-447b-4b7f-aad4-\
454cccc278ae"],

Cell[BoxData[
 RowBox[{
  TemplateBox[{StyleBox["\"a\""],"\"Acceleration\""},
   "QuantityVariable",
   DisplayFunction->(TooltipBox[
     StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> False], 
     
     RowBox[{"Quantity variable:", " acceleration"}], TooltipStyle -> 
     "TextStyling"]& )], "\[Equal]", 
  FractionBox[
   RowBox[{
    RowBox[{"(", 
     TemplateBox[{
      "1",StyleBox["\"g\"", Italic, StripOnInput -> False],
       "standard accelerations due to gravity on the surface of the earth",
       "\"StandardAccelerationOfGravity\""},
      "Quantity"], ")"}], " ", 
    TemplateBox[{StyleBox["\"m\""],"\"Mass\""},
     "QuantityVariable",
     DisplayFunction->(TooltipBox[
       StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
        False], 
       RowBox[{"Quantity variable:", " mass"}], TooltipStyle -> 
       "TextStyling"]& )], " ", 
    SuperscriptBox[
     TemplateBox[{StyleBox["\"r\""],"\"Radius\""},
      "QuantityVariable",
      DisplayFunction->(TooltipBox[
        StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
         False], 
        RowBox[{"Quantity variable:", " radius"}], TooltipStyle -> 
        "TextStyling"]& )], "2"], " ", 
    RowBox[{"Sin", "[", 
     TemplateBox[{StyleBox["\"\[Theta]\""],"\"Angle\""},
      "QuantityVariable",
      DisplayFunction->(TooltipBox[
        StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
         False], 
        RowBox[{"Quantity variable:", " angle"}], TooltipStyle -> 
        "TextStyling"]& )], "]"}]}], 
   RowBox[{
    TemplateBox[{StyleBox["\"I\""],"\"MomentOfInertia\""},
     "QuantityVariable",
     DisplayFunction->(TooltipBox[
       StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
        False], 
       RowBox[{"Quantity variable:", " moment of inertia"}], TooltipStyle -> 
       "TextStyling"]& )], "+", 
    RowBox[{
     TemplateBox[{StyleBox["\"m\""],"\"Mass\""},
      "QuantityVariable",
      DisplayFunction->(TooltipBox[
        StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
         False], 
        RowBox[{"Quantity variable:", " mass"}], TooltipStyle -> 
        "TextStyling"]& )], " ", 
     SuperscriptBox[
      TemplateBox[{StyleBox["\"r\""],"\"Radius\""},
       "QuantityVariable",
       DisplayFunction->(TooltipBox[
         StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
          False], 
         RowBox[{"Quantity variable:", " radius"}], TooltipStyle -> 
         "TextStyling"]& )], "2"]}]}]]}]], "Output",
 CellChangeTimes->{
  3.706914399131214*^9},ExpressionUUID->"87d6bc97-6cbe-4a22-90f3-\
5a3d7d698282"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"FormulaData", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
    "\"\<InclinedPlaneRolling\>\"", ",", "\"\<PureRolling\>\"", ",", 
     "\"\<SlopeAngle\>\"", ",", "\"\<MomentOfInertia\>\""}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"\"\<\[Theta]\>\"", "\[Rule]", 
      RowBox[{"Quantity", "[", 
       RowBox[{"27", ",", "\"\<AngularDegrees\>\""}], "]"}]}], ",", 
     RowBox[{"\"\<m\>\"", "\[Rule]", 
      RowBox[{"Quantity", "[", 
       RowBox[{"1", ",", "\"\<Kilograms\>\""}], "]"}]}], ",", 
     RowBox[{"\"\<r\>\"", "\[Rule]", 
      RowBox[{"Quantity", "[", 
       RowBox[{"10", ",", "\"\<Centimeters\>\""}], "]"}]}], ",", 
     RowBox[{"\"\<I\>\"", "\[Rule]", 
      RowBox[{"Quantity", "[", 
       RowBox[{"10", ",", 
        RowBox[{"\"\<Grams\>\"", " ", 
         RowBox[{"\"\<Meters\>\"", "^", "2"}]}]}], "]"}]}]}], "}"}]}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.7069143741764193`*^9, 
  3.7069143741774054`*^9}},ExpressionUUID->"ceec544d-0869-4853-b34d-\
6eea489925c7"],

Cell[BoxData[
 RowBox[{
  TemplateBox[{StyleBox["\"a\""],"\"Acceleration\""},
   "QuantityVariable",
   DisplayFunction->(TooltipBox[
     StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> False], 
     
     RowBox[{"Quantity variable:", " acceleration"}], TooltipStyle -> 
     "TextStyling"]& )], "\[Equal]", 
  TemplateBox[{FractionBox[
     RowBox[{"196133", " ", 
       RowBox[{"Sin", "[", 
         FractionBox[
          RowBox[{"3", " ", "\[Pi]"}], "20"], "]"}]}], "40000"],
    RowBox[{"\"m\"", "\[InvisibleSpace]", "\"/\"", "\[InvisibleSpace]", 
      SuperscriptBox["\"s\"", "2"]}],"meters per second squared",FractionBox[
    "\"Meters\"", 
     SuperscriptBox["\"Seconds\"", "2"]]},
   "Quantity"]}]], "Output",
 CellChangeTimes->{
  3.706914607487864*^9},ExpressionUUID->"b2af12bb-22a2-4af3-894e-\
51e58cc2b7ff"]
}, Open  ]],

Cell["\<\
Plot the height of a falling object as a function of time (starting at height \
40) :\
\>", "Text",
 CellChangeTimes->{{3.706914782807392*^9, 
  3.7069147909101877`*^9}},ExpressionUUID->"321816be-0c14-450c-b2c6-\
443bda4682eb"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Plot", "[", 
  RowBox[{
   RowBox[{"40", "-", 
    RowBox[{"9.8", " ", 
     RowBox[{
      RowBox[{"t", "^", "2"}], "/", "2"}]}]}], ",", 
   RowBox[{"{", 
    RowBox[{"t", ",", "0", ",", "3"}], "}"}]}], "]"}]], "Input",ExpressionUUID\
->"b33e547f-efc4-4eeb-af70-b5c02bed8230"],

Cell[BoxData[
 GraphicsBox[{{{}, {}, 
    TagBox[
     {RGBColor[0.368417, 0.506779, 0.709798], AbsoluteThickness[1.6], Opacity[
      1.], LineBox[CompressedData["
1:eJwV1Ak4VekfB/Br64pEjaWs2W4kyU7i97rHkErMGCqpydpNxjaK7AlTl9vY
J5ItWYaSZfJPhmMn5krURdk1hSl7yPZ/e5/nPO/zec77fN/fOef3Hnln7x/d
uCkUyn18fZtXTnjdt/H2MdnY+jYIFOO6X6WLdgp+y9Ua/OZ/Pk94sGgXQHGy
0/+bi8XeZvdnuEN3D7tlE3u2gojzpHlBgrNBzwa2pOqb51scP3BJ2Z6+jm0c
yNRsz7gG5p50qTXsi60mBYlOQXD0w5j9Knak+IK0Iy0MiG3TJ5exX5Xbticu
RYBju8PGIrbrgHrUMicSfjusxZjHXuLiB8fqKGgy8mXNfKtXdWyVzIiB76Yl
fvkPW+KHmkrl8Fvgb0KjTmIXBqZ6M52Y8EE349x77I7W4+9taXeAe1ed9iD2
44DdNo688VC8eKWqDzsgNvzRnaV4cAuJWOrB5q84y1jgJIJw4Eh2O/bLlpZm
5fYk2JpW29mEnTagrXimOhm4eId1a7EPcO8cqslIBaN9IZVl2PNiwUYzrD/A
T8ldsBj7uerHu/Lhd6Gms0o6D/vkDw22MU7pEL090SsF2zv7Wrs1LRM+aSt0
+WMbVI7TIiWyoPKM5eoVbIqrCt2BNxtY8n2DztjtASlZcUvZ4J918I01tkOW
t8McJxf2niy7ScM2UaXdZto8AO8EsRtS2AoV76oU2x8AJ2jUQAR7usVSzL46
DwYNn3BWNgkU8lnxZXVGPtQxVF+1YF8MHNi0FSuAPPaL3GfYZtwJ6p9YBXCv
r0e9BFtIfJMpF14IdX3Sv8ZjZxr3fR/l9CcM3WZW22HXx8U9t6I9hoDS3qM9
GwSqnervFCx6DPkaGvokds2x/UPtaqXgI1A7XIJ9jtuJ8mDPE+B0BRpFY9vV
rinIyZbBdJqzjBb2cT1NhoRqBWiqUWND1gl07D3H55pHBYjZFTBcsS2Sw66/
Lq6A5P7gxRPYZvMdzKRDleAyXy8uiW3y2P2RsM5fYOnSEF2+RiBtWsY8FapA
m54s1PuVQFqv6WvuEVXQIRbEfop9OGqSp6W+CjaJZOM07ENjemJRZv8D/Sdu
tPPYKpnd+pTjz2CmNURhdJVA0uLU0JWfnkPIYnBT/wqB+Lb5USc96kCQXlvK
+kKgj5bhwgsFdaD40ZbDwH7BipPYmKgDScO0KgK7ldmTdEuDhLy3WrkrSwSK
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
ZvGiMw==
       "]]},
     Annotation[#, "Charting`Private`Tag$17673#1"]& ]}, {}, {}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0, 0},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, 
     Charting`ScaledFrameTicks[{Identity, Identity}]}, {Automatic, 
     Charting`ScaledFrameTicks[{Identity, Identity}]}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImagePadding->All,
  Method->{
   "DefaultBoundaryStyle" -> Automatic, "DefaultMeshStyle" -> 
    AbsolutePointSize[6], "ScalingFunctions" -> None, 
    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& )}},
  PlotRange->{{0, 3}, {-4.099998200000023, 39.99999999999998}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.05], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{
  3.706914802372113*^9},ExpressionUUID->"3df61fba-626b-4eb4-b64e-\
dde378d53a10"]
}, Open  ]],

Cell["\<\
Solve for the time when the object hits the ground (use\[Equal]to represent \
an equation) :\
\>", "Text",
 CellChangeTimes->{{3.7069147549582663`*^9, 
  3.706914757718287*^9}},ExpressionUUID->"dcce7fc0-f778-4686-95aa-\
c39f673cb492"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Solve", "[", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{
     RowBox[{"40", "-", 
      RowBox[{"9.8", " ", 
       RowBox[{
        RowBox[{"t", "^", "2"}], "/", "2"}]}]}], "\[Equal]", "0"}], ",", 
    RowBox[{"t", ">", "0"}]}], "}"}], "]"}]], "Input",ExpressionUUID->\
"3d9c3101-7181-4349-b7b9-f856408825b4"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"{", 
   RowBox[{"t", "\[Rule]", "2.8571428571428568`"}], "}"}], "}"}]], "Output",
 CellChangeTimes->{
  3.706914822057654*^9},ExpressionUUID->"583e77b1-3288-4187-b0bd-\
170886fdd612"]
}, Open  ]],

Cell["Do the same computation including units:", "Text",
 CellChangeTimes->{
  3.7069147409023123`*^9},ExpressionUUID->"6ede1a09-1d05-4503-9193-\
ead351bca631"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Solve", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{
      RowBox[{
       RowBox[{"Quantity", "[", 
        RowBox[{"40", ",", "\"\<Meters\>\""}], "]"}], "-", 
       RowBox[{
        RowBox[{"Quantity", "[", 
         RowBox[{"9.8", ",", "\"\<MetersPerSecondSquared\>\""}], "]"}], " ", 
        RowBox[{
         RowBox[{"t", "^", "2"}], "/", "2"}]}]}], "\[Equal]", "0"}], ",", 
     RowBox[{"t", ">", "0"}]}], "}"}], ",", "t"}], "]"}]], "Input",ExpressionU\
UID->"6257ddf6-3f02-4c23-adde-21d9aeecc098"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"{", 
   RowBox[{"t", "\[Rule]", 
    TemplateBox[{"2.8571428571428568`","\"s\"","seconds","\"Seconds\""},
     "Quantity"]}], "}"}], "}"}]], "Output",
 CellChangeTimes->{
  3.7069148272015257`*^9},ExpressionUUID->"439d063b-2d6c-4a82-9c25-\
cae58d8412e7"]
}, Open  ]],

Cell["Enter the units using \[ControlKey] + = :", "Text",
 CellChangeTimes->{{3.706914693331574*^9, 3.706914693332819*^9}, {
  3.706914833457314*^9, 
  3.7069148396823053`*^9}},ExpressionUUID->"756e78fe-e8f8-49c6-acab-\
3df8c6ec6e8e"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Solve", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{
      RowBox[{
       NamespaceBox["LinguisticAssistant",
        DynamicModuleBox[{Typeset`query$$ = "40 m", Typeset`boxes$$ = 
         TemplateBox[{"40", "\"m\"", "meters", "\"Meters\""}, "Quantity", 
          SyntaxForm -> Mod], 
         Typeset`allassumptions$$ = {{
          "type" -> "Clash", "word" -> "m", "template" -> 
           "Assuming \"${word}\" is ${desc1}. Use as ${desc2} instead", 
           "count" -> "2", 
           "Values" -> {{
             "name" -> "Unit", "desc" -> "a unit", "input" -> 
              "*C.m-_*Unit-"}, {
             "name" -> "Variable", "desc" -> "a variable", "input" -> 
              "*C.m-_*Variable-"}}}, {
          "type" -> "Unit", "word" -> "m", "template" -> 
           "Assuming ${desc1} for \"${word}\". Use ${desc2} instead", "count" -> 
           "3", "Values" -> {{
             "name" -> "Meters", "desc" -> "meters", "input" -> 
              "UnitClash_*m.*Meters--"}, {
             "name" -> "Minims", "desc" -> "US minims of volume", "input" -> 
              "UnitClash_*m.*Minims--"}, {
             "name" -> "Minutes", "desc" -> "minutes of time", "input" -> 
              "UnitClash_*m.*Minutes--"}}}}, Typeset`assumptions$$ = {}, 
         Typeset`open$$ = {1, 2}, Typeset`querystate$$ = {
         "Online" -> True, "Allowed" -> True, "mparse.jsp" -> 0.531806, 
          "Messages" -> {}}}, 
         DynamicBox[ToBoxes[
           AlphaIntegration`LinguisticAssistantBoxes["", 4, Automatic, 
            Dynamic[Typeset`query$$], 
            Dynamic[Typeset`boxes$$], 
            Dynamic[Typeset`allassumptions$$], 
            Dynamic[Typeset`assumptions$$], 
            Dynamic[Typeset`open$$], 
            Dynamic[Typeset`querystate$$]], StandardForm],
          ImageSizeCache->{94., {8., 16.}},
          
          TrackedSymbols:>{
           Typeset`query$$, Typeset`boxes$$, Typeset`allassumptions$$, 
            Typeset`assumptions$$, Typeset`open$$, Typeset`querystate$$}],
         DynamicModuleValues:>{},
         UndoTrackedVariables:>{Typeset`open$$}],
        BaseStyle->{"Deploy"},
        DeleteWithContents->True,
        Editable->False,
        SelectWithContents->True], "-", 
       RowBox[{
        NamespaceBox["LinguisticAssistant",
         DynamicModuleBox[{Typeset`query$$ = "9.8 m/s^2", Typeset`boxes$$ = 
          TemplateBox[{"9.8", 
            
            RowBox[{"\"m\"", "\[InvisibleSpace]", "\"/\"", 
              "\[InvisibleSpace]", 
              SuperscriptBox["\"s\"", "2"]}], "meters per second squared", 
            FractionBox["\"Meters\"", 
             SuperscriptBox["\"Seconds\"", "2"]]}, "Quantity", SyntaxForm -> 
           Mod], Typeset`allassumptions$$ = {{
           "type" -> "MultiClash", "word" -> "", "template" -> 
            "Assuming ${word1} is referring to ${desc1}. Use \"${word2}\" as \
${desc2}.", "count" -> "2", 
            "Values" -> {{
              "name" -> "Unit", "word" -> "m/s^2", "desc" -> "a unit", 
               "input" -> "*MC.m%2Fs%5E2-_*Unit-"}, {
              "name" -> "Variable", "word" -> "m", "desc" -> "a variable", 
               "input" -> "*MC.m%2Fs%5E2-_*Variable-"}}}}, 
          Typeset`assumptions$$ = {}, Typeset`open$$ = {1, 2}, 
          Typeset`querystate$$ = {
          "Online" -> True, "Allowed" -> True, "mparse.jsp" -> 0.63603, 
           "Messages" -> {}}}, 
          DynamicBox[ToBoxes[
            AlphaIntegration`LinguisticAssistantBoxes["", 4, Automatic, 
             Dynamic[Typeset`query$$], 
             Dynamic[Typeset`boxes$$], 
             Dynamic[Typeset`allassumptions$$], 
             Dynamic[Typeset`assumptions$$], 
             Dynamic[Typeset`open$$], 
             Dynamic[Typeset`querystate$$]], StandardForm],
           ImageSizeCache->{124., {8., 17.}},
           
           TrackedSymbols:>{
            Typeset`query$$, Typeset`boxes$$, Typeset`allassumptions$$, 
             Typeset`assumptions$$, Typeset`open$$, Typeset`querystate$$}],
          DynamicModuleValues:>{},
          UndoTrackedVariables:>{Typeset`open$$}],
         BaseStyle->{"Deploy"},
         DeleteWithContents->True,
         Editable->False,
         SelectWithContents->True], 
        RowBox[{
         RowBox[{"t", "^", "2"}], "/", "2"}]}]}], "\[Equal]", "0"}], ",", 
     RowBox[{"t", ">", "0"}]}], "}"}], ",", "t"}], "]"}]], "Input",ExpressionU\
UID->"a52b741a-bcbe-4a02-bb83-eba1cdfb0c00"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"{", 
   RowBox[{"t", "\[Rule]", 
    TemplateBox[{"2.8571428571428568`","\"s\"","seconds","\"Seconds\""},
     "Quantity"]}], "}"}], "}"}]], "Output",
 CellChangeTimes->{
  3.70691484370103*^9},ExpressionUUID->"f70bb6a6-9a6c-4c53-93d8-a8a3940b1197"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Useful links", "Subsection",
 CellChangeTimes->{{3.706915874177362*^9, 
  3.706915879359487*^9}},ExpressionUUID->"f2d364d1-fd63-492b-a20b-\
87d7a5ce883c"],

Cell[BoxData["\"\<video ->  \
http://www.sciencephoto.com/media/727980/view\>\""], "Input",
 CellChangeTimes->{{3.7069158815179663`*^9, 
  3.70691590963869*^9}},ExpressionUUID->"cbddcfc4-42a9-48e5-8195-\
c9f9d559ec66"]
}, Open  ]]
},
WindowSize->{808, 655},
WindowMargins->{{4, Automatic}, {Automatic, 4}},
FrontEndVersion->"11.1 for Mac OS X x86 (32-bit, 64-bit Kernel) (April 27, \
2017)",
StyleDefinitions->"Default.nb"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[558, 20, 161, 3, 41, "WolframAlphaLong", "ExpressionUUID" -> \
"9ee95055-2c66-4bcf-b0ad-e8fd83c5fe47"],
Cell[CellGroupData[{
Cell[744, 27, 430, 11, 54, "Input", "ExpressionUUID" -> \
"9986d409-9a56-4469-a41a-62245268df40"],
Cell[1177, 40, 52207, 870, 165, "Output", "ExpressionUUID" -> \
"9e98ca3e-477c-41da-b1cc-506b583a851d"]
}, Open  ]],
Cell[53399, 913, 17038, 407, 72, "WolframAlphaShortInput", "ExpressionUUID" \
-> "dc76cb56-ea6c-4e88-9862-ea97ea16d9f4"],
Cell[CellGroupData[{
Cell[70462, 1324, 422, 9, 41, "Input", "ExpressionUUID" -> \
"aca8be31-7e90-41f1-93f4-e2e2f873d41f"],
Cell[70887, 1335, 9417, 176, 254, "Output", "ExpressionUUID" -> \
"5507c063-58a5-4b9e-99e3-d8e1305dc8cb"]
}, Open  ]],
Cell[CellGroupData[{
Cell[80341, 1516, 468, 10, 41, "Input", "ExpressionUUID" -> \
"f2f567b7-e1d9-49d7-bc02-6889378bd134"],
Cell[80812, 1528, 51034, 844, 165, "Output", "ExpressionUUID" -> \
"3144aeb5-f3a2-4621-838f-3eaf7f1658f0"]
}, Open  ]],
Cell[131861, 2375, 167, 3, 41, "WolframAlphaLong", "ExpressionUUID" -> \
"4335ab80-f50f-4481-86f5-415f03fb1db9"],
Cell[CellGroupData[{
Cell[132053, 2382, 304, 8, 32, "Input", "ExpressionUUID" -> \
"177842f8-cf2b-415d-9a92-9e27b54ccd5b"],
Cell[132360, 2392, 5204, 109, 178, "Output", "ExpressionUUID" -> \
"ef7250d5-1bb1-46da-a912-11c3cac5e7f0"]
}, Open  ]],
Cell[CellGroupData[{
Cell[137601, 2506, 170, 3, 41, "WolframAlphaLong", "ExpressionUUID" -> \
"c26de6ab-21fc-47e4-b41f-d29d2feff2ee"],
Cell[137774, 2511, 69247, 1401, 1432, "Print", "ExpressionUUID" -> \
"d6c801ec-bce0-4d2e-b0c1-e95337e69351"]
}, Open  ]],
Cell[CellGroupData[{
Cell[207058, 3917, 304, 8, 32, "Input", "ExpressionUUID" -> \
"e35bd45f-4b45-4003-aead-f839122075bc"],
Cell[207365, 3927, 5204, 109, 178, "Output", "ExpressionUUID" -> \
"9f3f1a97-374c-461f-93a0-f94bc26d1037"]
}, Open  ]],
Cell[CellGroupData[{
Cell[212606, 4041, 311, 8, 32, "Input", "ExpressionUUID" -> \
"82601856-75bb-4b06-8cc0-ee40fd9dc262"],
Cell[212920, 4051, 182, 4, 32, "Output", "ExpressionUUID" -> \
"f81b8993-f8a0-40e0-81b6-59deade05f31"]
}, Open  ]],
Cell[CellGroupData[{
Cell[213139, 4060, 355, 9, 32, "Input", "ExpressionUUID" -> \
"a19be546-77d4-48b9-8320-f7bbfa64a1aa"],
Cell[213497, 4071, 2677, 66, 55, "Output", "ExpressionUUID" -> \
"014338e7-0bba-47e2-a550-68929eb01d7e"]
}, Open  ]],
Cell[CellGroupData[{
Cell[216211, 4142, 1030, 26, 75, "Input", "ExpressionUUID" -> \
"a707f99f-cc97-421c-8d43-cec338b155fa"],
Cell[217244, 4170, 843, 21, 61, "Output", "ExpressionUUID" -> \
"86eda148-ff7f-4ddf-b9e1-9a39b1406e2e"]
}, Open  ]],
Cell[218102, 4194, 237, 6, 30, "Text", "ExpressionUUID" -> \
"34aa42b2-cc25-4fd0-9cfe-48950c5b3c71"],
Cell[CellGroupData[{
Cell[218364, 4204, 301, 9, 32, "Input", "ExpressionUUID" -> \
"5654c303-9f19-4fc7-94c9-c2ca5d27f5b4"],
Cell[218668, 4215, 4748, 97, 234, "Output", "ExpressionUUID" -> \
"6424e7a5-9249-4d5d-9608-c9bb1e5b3f30"]
}, Open  ]],
Cell[223431, 4315, 244, 6, 30, "Text", "ExpressionUUID" -> \
"2fae780d-5e38-4487-ab3c-5a0dee40fdd5"],
Cell[CellGroupData[{
Cell[223700, 4325, 332, 10, 32, "Input", "ExpressionUUID" -> \
"a1569a94-fd3c-492b-853b-b8c8e5777a52"],
Cell[224035, 4337, 223, 6, 32, "Output", "ExpressionUUID" -> \
"b8eeca32-8c9a-43a0-9904-61de4bf62a95"]
}, Open  ]],
Cell[224273, 4346, 160, 3, 30, "Text", "ExpressionUUID" -> \
"fa80b1bd-e6df-4d77-bcbc-d3108710c437"],
Cell[CellGroupData[{
Cell[224458, 4353, 545, 15, 54, "Input", "ExpressionUUID" -> \
"c555253f-1f2c-49a0-b7cf-1fdeef3d45fc"],
Cell[225006, 4370, 294, 8, 35, "Output", "ExpressionUUID" -> \
"5add54ec-9857-4327-8939-4159aab9a9e1"]
}, Open  ]],
Cell[225315, 4381, 234, 4, 30, "Text", "ExpressionUUID" -> \
"e9231868-7bfb-4556-a0f8-7a629b7f3204"],
Cell[CellGroupData[{
Cell[225574, 4389, 4512, 96, 43, "Input", "ExpressionUUID" -> \
"a52b741a-bcbe-4a02-bb83-eba1cdfb0c00"],
Cell[230089, 4487, 289, 7, 35, "Output", "ExpressionUUID" -> \
"694ea1d5-43b8-4a96-95c6-ff7688672402"]
}, Open  ]],
Cell[CellGroupData[{
Cell[230415, 4499, 160, 3, 44, "Subsection", "ExpressionUUID" -> \
"82cd62a0-4812-4aeb-bb4c-f82f2cf362e5"],
Cell[230578, 4504, 218, 4, 32, "Input", "ExpressionUUID" -> \
"baf4a0e4-fb06-4548-81d2-a3da61cf24dc"]
}, Open  ]]
}
]
*)

